# -*- coding: utf-8 -*-
"""SQL II - A Vingança

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SSxhm8ssDjGX8i9ut_gnHkNv6mkRGehX
"""

!pip install mysql-connector-python

import mysql.connector
import pandas as pd

host = '34.70.26.188' # endereço do banco externo que eu quero acessar
user = 'root'
password = ''
database = 'locadora'

!curl ipecho.net/plain

def consulta(query, tabela):
  connection = mysql.connector.connect(
      host = host,
      user = user,
      password = password,
      database = database
  )
  cursor = connection.cursor()

  try:
    cursor.execute(query)
    result = cursor.fetchall()
    globals()[tabela] = pd.DataFrame(result, columns=cursor.column_names)
    display(globals()[tabela])
  finally:
    cursor.close()
    connection.close()

def ddl(comando):
    connection = mysql.connector.connect(
        host=host,
        user=user,
        password=password,
        database=database
    )
    cursor = connection.cursor()

    try:
        cursor.execute(comando)
        connection.commit()  # Confirma as mudanças no banco
        print(f"Comando DDL executado com sucesso:\n{comando}")
    except mysql.connector.Error as err:
        print(f"Erro ao executar o comando DDL: {err}")
    finally:
        cursor.close()
        connection.close()

"""# GROUP_CONCAT"""

'''
Liste os estados onde os clientes alugaram carros e os nomes dos clientes de
cada estado.
'''
consulta('''
SELECT estado, nome
FROM cliente;
''',''' ''')

'''
No bloco anterior temos uma situação onde cada estado aparece mais
de uma vez, pois, cada estado está associado à mais de um cliente, nosso
objetivo é apresentar uma consulta, cujo conjunto-resultado traga duas colunas
sendo uma para estado e outra para os nomes dos clientes, no entanto não desejamos
repetição de linhas de estado. Assim , podemos utilizar o GROUP_CONCAT para
resolver essa situação.
'''
consulta('''
SELECT estado, GROUP_CONCAT(nome SEPARATOR ', ') AS nomes
FROM cliente
GROUP BY estado;
''',''' ''')

'''
Exemplo
Listar os modelos de carros alugados por cada cliente:
'''
consulta('''
SELECT cliente.nome, carro.modelo
FROM cliente
JOIN aluguel ON cliente.codcliente = aluguel.codcliente
JOIN carro ON carro.codcarro = aluguel.codcarro;
''',''' ''')

'''
USAR GROUP_CONCAT para fazer com que os nomes da consulta anterior
apraceram em uma única linha
'''
consulta('''
SELECT cliente.nome, GROUP_CONCAT(carro.modelo SEPARATOR ', ') AS modelos
FROM cliente
JOIN aluguel ON cliente.codcliente = aluguel.codcliente
JOIN carro ON aluguel.codcarro = carro.codcarro
GROUP BY cliente.nome;
''',''' ''')

'''
Mostre as marcas dos carros alugados por cada cliente.
'''
'''
Exemplo
Listar os modelos de carros alugados por cada cliente:
'''
consulta('''
SELECT cliente.nome, marca.marca
FROM aluguel
JOIN carro ON aluguel.codcarro = carro.codcarro
JOIN marca ON marca.codmarca = carro.codmarca
JOIN cliente ON aluguel.codcliente = cliente.codcliente;
''',''' ''')

consulta('''
SELECT cliente.nome, GROUP_CONCAT(marca.marca SEPARATOR ', ') AS marcas_alugadas
FROM aluguel
JOIN carro ON aluguel.codcarro = carro.codcarro
JOIN marca ON carro.codmarca = marca.codmarca
JOIN cliente ON aluguel.codcliente = cliente.codcliente
GROUP BY cliente.nome;
''',''' ''')

'''
Exiba os nomes dos clientes e as datas em que alugaram carros, concatenando as
datas.
'''
consulta('''
SELECT cliente.nome, GROUP_CONCAT(DATE_FORMAT(aluguel.data_aluguel, '%d-%m-%Y') SEPARATOR ', ') AS datas
FROM aluguel
JOIN cliente ON aluguel.codcliente = cliente.codcliente
GROUP BY cliente.nome;
''',''' ''')

"""# VIEW"""

consulta('''
SHOW TABLES;;
''',''' ''')

'''
Uma view é uma consulta que fica armazenada no banco de dados como se
fosse uma tabela

Exemplo:

Crie uma consulta que exiba modelo e valor dos carros
'''
consulta('''
SELECT modelo, valor
FROM carro;
''',''' ''')

consulta('''
SHOW TABLES;;
''',''' ''')

'''
Crie uma view que armazena a consulta de modelo e valor como tabela no
banco de dados
'''
consulta('''
CREATE VIEW modelo_valor AS
SELECT modelo, valor
FROM carro;
''',''' ''')

consulta('''
SHOW TABLES;;
''',''' ''')

# Visualizando o schema de uma view
consulta('''
DESC modelo_valor;
''',''' ''')

# Exibindo os resultado de uma view
consulta('''
SELECT valor
FROM modelo_valor;
''',''' ''')

'''
Considerando que a view modelo_valor já existe
tente criá-la novamente
'''
consulta('''
CREATE VIEW modelo_valor AS
SELECT modelo, valor
FROM carro;
''',''' ''')

'''
No bloco anterior o erro aconteceu, pois, a view já existia,
porém se desjarmos sobrescreve-lá o código ficaria assim:
'''
consulta('''
CREATE OR REPLACE VIEW modelo_valor AS
SELECT modelo, valor
FROM carro;
''',''' ''')

# Criando uma view juntando todos os elementos das tabelas carro e aluguel
consulta('''
CREATE OR REPLACE VIEW carro_aluguel AS
SELECT carro.*, aluguel.codaluguel, aluguel.codcliente, aluguel.data_aluguel
FROM carro
LEFT JOIN aluguel
ON carro.codcarro = aluguel.codcarro;
''',''' ''')

# Exibindo os valores da view carro_aluguel
consulta('''
SELECT *
FROM carro_aluguel;
''',''' ''')

'''
Utilizando a tabela cliente e a view carro_aluguel
faça uma consulta que exiba nome, modelo e data_aluguel
'''
consulta('''
SELECT cliente.nome, carro_aluguel.modelo, carro_aluguel.data_aluguel
FROM carro_aluguel
JOIN cliente ON carro_aluguel.codcliente = cliente.codcliente;
''',''',''')

'''
Utilizando a tabela cliente e a view carro_aluguel
faça uma consulta que exiba nome, modelo e data_aluguel
'''
consulta('''
SELECT cliente.nome, carro_aluguel.modelo, carro_aluguel.data_aluguel
FROM carro_aluguel
LEFT JOIN cliente ON carro_aluguel.codcliente = cliente.codcliente;
''',''',''')

'''
Utilizando a tabela cliente e a view carro_aluguel
faça uma consulta que exiba nome, modelo e data_aluguel
'''
consulta('''
SELECT cliente.nome, carro_aluguel.modelo, carro_aluguel.data_aluguel
FROM carro_aluguel
RIGHT JOIN cliente ON carro_aluguel.codcliente = cliente.codcliente;
''',''',''')