# -*- coding: utf-8 -*-
"""AD-11-Pandas

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mbAcfk9VGP743fhtIjtQS-BotCWDrstW
"""

import pandas as pd

# Criando uma base para trannsformá-la em DF
nome = ['Douglas','Daniela','Pedro','Maria','Eduardo','Ester']
idade = [45,7,65,64,42,37]
altura = [1.85,1.23,1.75,1.67,1.82,1.73]
peso = [70,22,87,64,96,68]
sexo = ['M','F','M','F','M','F']

# Transformar as listas do bloco anterior em um DF
df = pd.DataFrame(zip(nome,idade,altura,peso,sexo),
                  columns=['nome','idade','altura', 'peso', 'sexo'])
display(df)

# Exibindo as informações do DF
df.info()

medidas = df.describe()
medidas.info()

display(medidas)

# Exibindo o número de linhas e colunas (nesta ordem)
df.shape

# Exibindo aleatoriamente os dados de uma linha
df.sample(1)

# Exibindo as primeiras linha do df
df.head(1)

# Exibindo os últimos registros
df.tail(3)

# Exibindo as informações do índice
df.index

"""# Fatiamento do DF"""

# Exibir as informações de uma linha específica usando seu rótulo
cara_bacana = df.loc[0]
display(cara_bacana)

# Exibir as informações de uma linha específica usando seu rótulo
objeto = medidas.loc['mean']
display(objeto)

type(objeto)

# Transformando uma Series pandas em uma lista Python
lista = list(objeto)
type(lista)

print(lista)

# Exibindo mais de uma linha pelo rótulo
df.loc[[0,2]]

# Exibindo média e desvio padrão do df medidas
medidas.loc[['mean','std']]

# Exibindo informações de uma linha específica polo índice
df.iloc[0]

# Exibindo informações de uma linha específica polo índice
medidas.iloc[0]

# Exibindo mais de uma linha pelo índice
df.iloc[[0,2]]

# Exibindo mais de uma linha pelo índice
medidas.iloc[[1,2]]

# Exibindo informações de uma coluna pelo rótulo
df.loc[:,'nome']

# Exibindo informações de uma coluna pelo rótulo
medidas.loc[:,'idade']

# Exibindo dados de mais de uma coluna pelo seu rótulo
df.loc[:,['nome','idade']]

'''
Imagine que você deseja saber nome e alturas dos elementos
das linhas de rótulo 0, 2 , 4
'''
df.loc[[0,2,4],['nome', 'altura']]

# Exibindo os dados de uma coluna pelo seu índice
df.iloc[:,0]

# Exibindo os dados de uma coluna pelo seu índice
df.iloc[:,[0,2]]

'''
Imagine que você deseja saber nome e alturas dos elementos
das linhas de índice 0, 2 , 4
'''
df.iloc[[0,2,4],[0,2]]

'''
Exibindo as informações de uma célula pelo rótulo
'''
df.loc[0,'idade']

'''
Exibindo as informações de uma célula pelo índice
'''
df.iloc[0,1]

"""Operações que modificam o DataFrame"""

'''
Alterar a idade de Douglas de 45, para 48
'''
df.loc[0,'idade'] = 48

display(df)

'''
Alterar a idade de Daniela de 7 para 10 pelo índice
'''
df.iloc[1,1] = 10
display(df)

"""# Renomear colunas"""

# Método 1
'''
Renomear as colunas de peso e sexo, por respectivamente massa e genero
'''
df.rename(columns={'peso':'massa','sexo':'genero'},inplace=True)

# voltando aos nomes originais
df.rename(columns={'massa':'peso','genero':'sexo'},inplace=True)
display(df)

# método 02
'''
Renomear as colunas de peso e sexo, por respectivamente massa e genero
'''
df = df.rename(columns={'peso':'massa','sexo':'genero'})
display(df)

# voltando aos nomes originais
df.rename(columns={'massa':'peso','genero':'sexo'},inplace=True)
display(df)

# Método 03
df.rename({'peso':'massa','sexo':'genero'},axis=1,inplace=True)

# voltando aos nomes originais
df.rename(columns={'massa':'peso','genero':'sexo'},inplace=True)
display(df)

# Método 4
df.rename({'peso':'massa','sexo':'genero'},axis='columns',inplace=True)
display(df)

# voltando aos nomes originais
df.rename(columns={'massa':'peso','genero':'sexo'},inplace=True)
display(df)

# Método 05
df.columns.values[3] = 'massa'
df.columns.values[4] = 'genero'
display(df)

"""# Renomeando linhas"""

# Método1
df.rename({0:'pai',1:'filha'}, axis=0, inplace=True)
display(df)

# Voltando ao original
df.rename({'pai':0,'filha':1}, axis=0, inplace=True)
display(df)

# Método 2
df.rename({0:'pai',1:'filha'}, axis='rows', inplace=True)
display(df)

# Resetando os rótulos do índice
df.reset_index(inplace=True, drop=True)
display(df)

# Excluindo uma linha
df.drop(5, axis=0,inplace=True)
display(df)

# Inserindo Linhas
df.loc[5] = ['Ester',40, 1.74, 65, 'F']
display(df)

# Atalho para exibir informações de uma coluna
df['nome']

# Atalho2
df.nome

df

# Inserindo coluna
df['imc'] = round(df['massa']/df['altura']**2,2)
display(df)

"""# Ordenando o DF"""

# Ordenar um df de forma crescente
df.sort_values('idade',inplace=True)
display(df)

df.reset_index(inplace=True, drop=True)
display(df)

# Ordenando de forma descrescente
df.sort_values('idade',inplace=True, ascending=False)
display(df)

df.reset_index(inplace=True, drop=True)
display(df)

'''
Exercício:
Crie um dataframe com as seguintes medidas descritivas a partir do
df original:
1 - contagem - (count)
2 - media - (mean)
3 - mediana - (criar linha nova)
4 - moda - (criar linha nova)
5 - variância - (criar linha nova)
6 - desvio padrão - (std)
7 - valor mínimo - (min)
8 - Q1 - (25%)
9 - Q2 - (50%)
10 -Q3 - (75%)
11 -Valor máximo (max)
12 -AIQ - (criar linha nova)
13 -LI - (criar linha nova)
14 -LS -(criar linha nova)
'''

# Reconstruindo o dataframe medidas
medidas = df.describe()

# Transformando a linha de Q2 em uma lista chamada mediana
mediana = list(medidas.loc['50%'])
print(mediana)

# Devolvendo a lista mediana ao df Medidas
medidas.loc['mediana'] = mediana
medidas

# Forçando o DF original ter moda (parte 1)
df.loc[4,'altura'] = 1.75
df.loc[3, 'massa'] = 87

# Forçando o DF original ter moda (parte 1)
df.loc[5,'idade'] = 65

# Calculando a moda de cada atributo quant usando o pandas
moda = [df['idade'].mode().loc[0],df['altura'].mode().loc[0],df['massa'].mode().loc[0],df['imc'].mode().loc[0]]
print(moda)

'''
Criando uma lista vazio de variância, transformando std em uma lista
chamada desvio, iterando sobre a lista desvio e appendando o resultado das
iterções na lista variancia
'''
variancia = []
desvio = list(medidas.loc['std'])
for i in range(len(desvio)):
  variancia.append(round(desvio[i]**2,6))
print(variancia)

'''
Transformando primeiro e terceiro quartis em listas,
criando listas vazias para aiq, li e ls, iterando sobre q1 e q3
para appendar na lista aiq
'''
q1 = list(medidas.loc['25%'])
q3 = list(medidas.loc['75%'])
aiq = []
li = []
ls = []
for i in range(len(q1)):
  aiq.append(round(q3[i]-q1[i],6))
print(aiq)

'''
Iterando sobre a lista aiq para appendar na listas li e ls
'''
for i in range(len(aiq)):
  li.append(round(q1[i] - (1.5*aiq[i]),6))
  ls.append(round(q3[i] + (1.5*aiq[i]),6))

'''
Inserindo as listas criadas no df medidas
'''
medidas.loc['moda'] = moda
medidas.loc['variancia'] = variancia
medidas.loc['LI'] = li
medidas.loc['LS'] = ls
medidas.loc['AIQ'] = aiq
display(medidas)

'''
Renomeando as listas de acordo com os nomes pedidos no enunciado
'''
medidas.rename({'count':'Contagem','mean':'Média',
                'std':'Desvio Padrão','min':'Valor Mínimo','25%':'Q1',
                '50%':'Q2','75%':'Q3','max':'Valor Máximo'}, axis=0, inplace=True)

'''
Reordenando as linhas de acordo com o que foi pedido
'''
medidas = medidas.loc[['Contagem','Média','mediana','moda','variancia',
                       'Desvio Padrão', 'Valor Mínimo', 'Q1', 'Q2', 'Q3',
                       'Valor Máximo', 'AIQ', 'LI', 'LS']]
display(medidas)

"""# Agrupamentos"""

df = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vR2snMwL0lRHwNv3ilck0T98nhhyAqzmU5oQMKY4nwKZu_0FkiGo8U7ZXvA63CQOg2bYfmhKc6c-dL1/pub?gid=0&single=true&output=csv')
display(df)

df.info()

'''
Crie uma visão do salário médio por cidade
'''
df[['cidade','salario']].groupby('cidade').mean()

'''
Crie uma visão do salário médio agrupado por departamento e por
cargo
'''
df[['departamento','cargo','salario']].groupby(['departamento','cargo']).mean()

'''
Crie uma visão dos 25% menores salários agrupados por cargos
'''
df[['cargo','salario']].groupby('cargo').quantile(0.25)

'''
Vamor fazer uma consulta que retorne apenas os nomes e salários,
cujo salário seja maior que 20.000
'''
df.loc[df['salario'] > 20000,['nome','salario']]

'''
Alternativa ao código do bloco anterior
'''
df.query('salario > 20000')[['nome','cargo','salario']]

'''
Faça uma consulta que retorne todos os nomes de
funcionários de Atibaia
'''
df.query('cidade == "Atibaia"')[['nome','cidade']]

'''
Faça uma consulta que retorne os nomes e idades de funcionários
acima de 30 anos
'''
df.query('idade > 30')[['nome', 'idade']]

'''
Faça uma consulta que retorne os nomes e idades de funcionários
acima da média de idade
'''
df.query('idade > (idade.mean())')[['nome','idade']]

'''
Faça uma consulta que retorne os nomes e idades de funcionários
abixo da média de idade
'''
df.query('idade < (idade.mean())')[['nome','idade']]

nome = ['Douglas','Daniela','Pedro','Maria','Eduardo','Ester']
idade = [45,7,65,64,42,37]
altura = [1.85,1.23,1.75,1.67,1.82,1.73]
peso = [70,22,87,64,96,68]
sexo = ['M','F','M','F','M','F']
df = pd.DataFrame(zip(nome,idade,altura,peso,sexo),
                  columns=['nome','idade','altura','peso','sexo'])

nome = ['Douglas1','Daniela1']
idade = [45,7]
altura = [1.85,1.23]
peso = [70,22]
sexo = ['M','F']
df2 = pd.DataFrame(zip(nome,idade,altura,peso,sexo),
                  columns=['nome','idade','altura','peso','sexo'])

"""# Concatenação de tabelas"""

uniao = pd.concat([df,df2])
display(uniao)

# DataFrame 1
df1 = pd.DataFrame({
    'ID': [1, 2, 3],
    'Nome': ['Alice', 'Roberto', 'Carlos'],
    'Salário': [50000, 60000, 70000]
})
display(df1)

# DataFrame 2
df2 = pd.DataFrame({
    'ID': [4, 5, 6],
    'Nome': ['David', 'Eva', 'Francisco'],
    'Salário': [80000, 90000, 100000]
})
display(df2)

geral = pd.concat([df1,df2],ignore_index=True)
display(geral)

# DataFrame 1
df1 = pd.DataFrame({
    'ID': [1, 2, 3],
    'Nome': ['Alice', 'Roberto', 'Carlos']
})
display(df1)

# DataFrame 2
df2 = pd.DataFrame({
    'Salário': [50000, 60000, 70000],
    'Departamento': ['TI', 'RH', 'Marketing']
})
display(df2)

geral2 = pd.concat([df1,df2],axis=1)
display(geral2)

"""# Fusão"""

# Fusão de tabelas (merge)
# DataFrame 1
df1 = pd.DataFrame({
    'ID': [1, 2, 3, 4],
    'Nome': ['Alice', 'Roberto', 'Carlos', 'David'],
    'Salário': [50000, 60000, 70000, 80000]
})
display(df1)

# DataFrame 2
df2 = pd.DataFrame({
    'ID': [1, 2, 3, 5],
    'Departamento': ['TI', 'RH', 'Marketing', 'Vendas']
})
display(df2)

inner_join = pd.merge(df1, df2, on='ID', how='inner')
display(inner_join)

left_join = pd.merge(df1, df2, on='ID', how='left')
display(left_join)

right_join = pd.merge(df1, df2, on='ID', how='right')
display(right_join)

outer_join = pd.merge(df1, df2, on='ID', how='outer')
display(outer_join)

# DataFrame 1
df1 = pd.DataFrame({
    'ID': [1, 2, 3, 4],
    'Nome': ['Alice', 'Roberto', 'Carlos', 'David'],
    'Salário': [50000, 60000, 70000, 80000]
})
display(df1)

# DataFrame 2
df2 = pd.DataFrame({
    'ID': [1, 2, 3, 5],
    'Departamento': ['TI', 'RH', 'Marketing', 'Vendas']
})
display(df2)

df1.set_index('ID', inplace=True)
df2.set_index('ID', inplace=True)

inner_join2 = df1.join(df2,how='inner')
display(inner_join2)

inner_join2 = df1.join(df2,how='left')
display(inner_join2)

inner_join2 = df1.join(df2,how='right')
display(inner_join2)

inner_join2 = df1.join(df2,how='outer')
display(inner_join2)

cliente = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vQW3fP3j4qoiMGBXDAGzg_9IW2b3zgjdkVKLsURNVe9QezpHXimWfKle_55CQQtkeWL69OAASBDNdk8/pub?gid=2073489257&single=true&output=csv')
display(cliente)

aluguel = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vRncyLGO1iOo2H53JaryzVF1GPjUhWl9DsN7TZROCDxaP85iCwl5aW5ffBEzqtpAMRNYkd7eO5ehmgn/pub?gid=1581881382&single=true&output=csv')
display(aluguel)

carro = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vSznlX7UXeH_LeKcNteiDnWvdwZyydAQl0_x8NU9cx6G00Zh7SMrjoUuNpytVq7U-iQVzQNJ7jC7GpY/pub?gid=306989914&single=true&output=csv')
display(carro)

marca = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vSI-4_QEFwZ6eDGwUDlip0_PGBn7d_F7j59UwXmRvWbQFyy01ENPatjkbO1E8k5ZW5lqSY9ox112j7X/pub?gid=1160143272&single=true&output=csv')
display(marca)