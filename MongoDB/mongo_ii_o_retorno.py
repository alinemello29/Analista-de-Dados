# -*- coding: utf-8 -*-
"""Mongo II O Retorno

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18eWiopjPqvgIIjnxPc_n0O1GyIg5Ff9z
"""

!pip install pymongo

!curl ipecho.net/plain

from pymongo import MongoClient
import pandas as pd
# Conectar ao MongoDB Atlas
client = MongoClient('mongodb+srv://douglasdealmeidaribeiro:c2ygnygvNLpGtOZr@cluster0.xu3hl.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0')
db = client['locadoran']  # Nome do banco de dados

# Carregar os dados dos CSVs
aluguel = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vRncyLGO1iOo2H53JaryzVF1GPjUhWl9DsN7TZROCDxaP85iCwl5aW5ffBEzqtpAMRNYkd7eO5ehmgn/pub?gid=1581881382&single=true&output=csv')
aluguel = aluguel.to_dict(orient='records')
db.aluguel.insert_many(aluguel)

carro = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vSznlX7UXeH_LeKcNteiDnWvdwZyydAQl0_x8NU9cx6G00Zh7SMrjoUuNpytVq7U-iQVzQNJ7jC7GpY/pub?gid=306989914&single=true&output=csv')
carro = carro.to_dict(orient='records')
db.carro.insert_many(carro)

cliente = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vQW3fP3j4qoiMGBXDAGzg_9IW2b3zgjdkVKLsURNVe9QezpHXimWfKle_55CQQtkeWL69OAASBDNdk8/pub?gid=2073489257&single=true&output=csv')
cliente = cliente.to_dict(orient='records')
db.cliente.insert_many(cliente)

marca = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vSI-4_QEFwZ6eDGwUDlip0_PGBn7d_F7j59UwXmRvWbQFyy01ENPatjkbO1E8k5ZW5lqSY9ox112j7X/pub?gid=1160143272&single=true&output=csv')
marca = marca.to_dict(orient='records')
db.marca.insert_many(marca)

# Listando todos os bancos do Cluster
print(client.list_database_names())

"""# OPERADORES DE COMPARAÇÃO"""

'''
igual a ($eq)
diferente de ($ne)
maior que ($gt)
maior ou igual a ($gte)
menor que ($lt)
menor ou igual a ($lte)
'''

'''
Faça uma consulta que retorne todos os documentos
da coleção carro cujo valor seja igual a 150
'''
list(db.carro.find({'valor':150}))

# Alternativa utilizando o operador $eq
'''
Faça uma consulta que retorne todos os documentos
da coleção carro cujo valor seja igual a 150
'''
a = list(db.carro.find({'valor':{'$eq':150}}))
df = pd.DataFrame(a)
if '_id' in df.columns:
  df.drop('_id', axis=1, inplace=True)
else:
  pass
df.head()

'''
Faça uma consulta que retorne todos os modelos de carros
diferentes de Kwid
'''
a = list(db.carro.find({'modelo':{'$ne':'Kwid'}}))
df = pd.DataFrame(a)
if '_id' in df.columns:
  df.drop('_id', axis=1, inplace=True)
else:
  pass
df.head()

'''
Faça uma consulta que retorne todos os documentos da coleção carro cujo
valor seja maior que 120
'''
a = list(db.carro.find({'valor':{'$gt':120}}))
df = pd.DataFrame(a)
if '_id' in df.columns:
  df.drop('_id', axis=1, inplace=True)
else:
  pass
df.head()

'''
Faça uma consulta que retorne todos os documentos da coleção carro cujo
valor seja maior ou igual a 120
'''
a = list(db.carro.find({'valor':{'$gte':120}}))
df = pd.DataFrame(a)
if '_id' in df.columns:
  df.drop('_id', axis=1, inplace=True)
else:
  pass
df.head()

'''
Faça uma consulta que retorne todos os documentos da coleção carro cujo
valor seja menor que 120
'''
a = list(db.carro.find({'valor':{'$lt':120}}))
df = pd.DataFrame(a)
if '_id' in df.columns:
  df.drop('_id', axis=1, inplace=True)
else:
  pass
df.head()

'''
Faça uma consulta que retorne todos os documentos da coleção carro cujo
valor seja menor ou igual a 120
'''
a = list(db.carro.find({'valor':{'$lte':120}}))
df = pd.DataFrame(a)
if '_id' in df.columns:
  df.drop('_id', axis=1, inplace=True)
else:
  pass
df.head()

"""# Operadores de verificação"""

'''
Faça uma consulta que que retorne todos os documentos da coleção
cliente onde o campo estadocivil tenha valor válido ($exists)
'''
a = list(db.cliente.find({'estadocivil':{'$exists':True}}))
df = pd.DataFrame(a)
if '_id' in df.columns:
  df.drop('_id', axis=1, inplace=True)
else:
  pass
df.head()

'''
Faça uma consulta que que retorne todos os documentos da coleção
cliente onde o campo estadocivil não tenha valor válido ($exists)
'''
a = list(db.cliente.find({'estadocivil':{'$exists':False}}))
df = pd.DataFrame(a)
if '_id' in df.columns:
  df.drop('_id', axis=1, inplace=True)
else:
  pass
df.head()

'''
Faça uma consulta que retorne todos os documentos da coleção
cliente cujos valores do campo nome sejam do tipo string
'''
a = list(db.cliente.find({'nome':{'$type':'string'}}))
df = pd.DataFrame(a)
if '_id' in df.columns:
  df.drop('_id', axis=1, inplace=True)
else:
  pass
df.head()

'''
Faça uma consulta que retorne todos os documentos da coleção
carro cujos valores do campo codcarro sejam do tipo int
'''
a = list(db.carro.find({'codcarro':{'$type':'int'}}))
df = pd.DataFrame(a)
if '_id' in df.columns:
  df.drop('_id', axis=1, inplace=True)
else:
  pass
df.head()

'''
Faça uma consulta que retorne os documentos da caloeção aluguel cujos
valores do campo data_aluguel sejam do tipo 'string'
'''
a = list(db.aluguel.find({'data_aluguel':{'$type':'string'}}))
df = pd.DataFrame(a)
if '_id' in df.columns:
  df.drop('_id', axis=1, inplace=True)
else:
  pass
df.head()

"""# Operadores Lógicos (AND e OR)"""

'''
Faça uma consulta que retorne todos os documentos da coleção
cliente que sejam solteiros e do sexo masculino
'''
a = list(db.cliente.find({'$and':[{'estadocivil':'S'},{'sexo':'M'}]}))
df = pd.DataFrame(a)
if '_id' in df.columns:
  df.drop('_id', axis=1, inplace=True)
else:
  pass
df.head()

'''
Faça uma consulta que retorne todos os documentos da coleção
carro que sejam Ka, Argo ou Onix e valor acima de 120
'''
a = list(db.carro.find({'$and':[{'modelo':{'$in':['Ka','Argo','Onix']}},{'valor':{'$gt':120}}]}))
df = pd.DataFrame(a)
if '_id' in df.columns:
  df.drop('_id', axis=1, inplace=True)
else:
  pass
df.head()

'''
Faça uma consulta que retorne todos os documentos da coleção
cliente cujo nome seja Ana Silva, Bruna Pereira ou Lúcia Andrade e
do RJ e Casada
'''
a = list(db.cliente.find({'$and':[{'nome':{'$in':['Ana Silva','Bruna Pereira','Lúcia Andrade']}}
                                  ,{'estado':{'$eq':'RJ'}},{'estadocivil':{'$eq':'C'}}]}))
df = pd.DataFrame(a)
if '_id' in df.columns:
  df.drop('_id', axis=1, inplace=True)
else:
  pass
df.head()

'''
Faça uma consulta que retorne todos os documentos da coleção
cliente cujo nome seja Ana Silva, Bruna Pereira ou Fernando Souza e
do SP e estadocivil S e sexo M
'''
a = list(db.cliente.find({
    '$and':[
        {'nome':{'$in':['Ana Silva', 'Bruna Pereira','Fernando Souza']}},
        {'estado':{'$eq':'SP'}},
        {'estadocivil':{'$eq':'S'}},
        {'sexo':{'$eq':'M'}}
]
}
))
df = pd.DataFrame(a)
if '_id' in df.columns:
  df.drop('_id', axis=1, inplace=True)
else:
  pass
df.head()

'''
Faça uma consulta que retorne todos os modelos de carro
que sejam Kwid ou Polo
'''
a = list(db.carro.find(
    {'$or':[
        {'modelo':'Kwid'},
        {'modelo':'Polo'}
    ]}
))
df = pd.DataFrame(a)
if '_id' in df.columns:
  df.drop('_id', axis=1, inplace=True)
else:
  pass
df.head()

'''
Faça uma consulta que retorne todos os modelos de carro
que sejam Kwid ou Polo
'''
a = list(db.carro.find(
    {'modelo':{'$in':['Kwid','Polo']}}
))
df = pd.DataFrame(a)
if '_id' in df.columns:
  df.drop('_id', axis=1, inplace=True)
else:
  pass
df.head()

'''
Faça uma consulta que retorne os documentos da coleção aluguel
que tenham acontecido entre 01 de abril de 2023 e 04 de abril de 2023
(inclusive) e sejam os carros de código 1, 3 ou 5 e alugados pelos
clientes 2, 4 ou 5.
'''
a = list(db.aluguel.find(
    {'$and':[
{'data_aluguel':{'$in':['2023-04-01','2023-04-02','2023-04-03','2023-04-04']}},
{'codcarro':{'$in':[1, 3 , 5]}},
{'codcliente':{'$in':[2, 4, 5]}}
    ]}
))
df = pd.DataFrame(a)
if '_id' in df.columns:
  df.drop('_id', axis=1, inplace=True)
else:
  pass
df.head()

"""# Estágios de agregação"""

'''
Faça uma consulta que retorne a quantidade de documentos na coleção carro
'''
list(db.carro.aggregate([
    {'$count':'contagem de carros'}
]))

'''
Sintaxe padrão de aggregate:
list(cursor_banco.nome_colecao.aggregate([{'$group':
{'_id': '$nome_do_campo', 'alias_do_campo_resultante':
{'$metodo_de_agregacao': {}}}}]))
'''

'''
Faça uma consulta que retorne a soma dos valores dos carros
'''
a = list(db.carro.aggregate([{'$group':
 {'_id': None, 'soma_dos_valores': {'$sum': '$valor'}}}]))
df = pd.DataFrame(a)
if '_id' in df.columns:
  df.drop('_id', axis=1, inplace=True)
else:
  pass
df.head()

'''
Faça uma consulta que retorne a soma dos valores dos carros
'''
a = list(db.marca.aggregate([{'$group':
 {'_id': '$marca', 'contagem': {'$count': {}}}}]))

df = pd.DataFrame(a)
if '_id' in df.columns:
  df.rename({'_id':'marca'}, axis=1, inplace=True)
else:
  pass
df.head()

'''
groupby(): Agrupar os dados por diferentes critérios.
sum(): Calcular a soma de colunas numéricas.
mean(): Calcular a média de colunas numéricas.
describe(): Obter estatísticas descritivas do DataFrame.
sort_values(): Ordenar os dados por uma determinada coluna.
'''

'''
Faça uma consulta que retorne a contagem dos valores dos agrupamentos de carros
'''
a = list(db.carro.aggregate([{'$group':
 {'_id': '$modelo', 'contagem': {'$count': {}}}}]))

df = pd.DataFrame(a)
if '_id' in df.columns:
  df.rename({'_id':'marca'}, axis=1, inplace=True)
else:
  pass
df.head()

'''
Faça uma consulta que retorne a soma dos valores dos agrupamentos de carros
'''
a = list(db.carro.aggregate([{'$group':
 {'_id': '$modelo', 'soma': {'$sum':'$valor'}}}]))

df = pd.DataFrame(a)
if '_id' in df.columns:
  df.rename({'_id':'modelo'}, axis=1, inplace=True)
else:
  pass
df.head()

'''
Faça uma consulta que retorne a soma dos valores dos agrupamentos de carros
'''
a = list(db.carro.aggregate([{'$group':
 {'_id': '$modelo', 'média': {'$mean':'$valor'}}}]))

df = pd.DataFrame(a)
if '_id' in df.columns:
  df.rename({'_id':'modelo'}, axis=1, inplace=True)
else:
  pass
df.head()
'''
Neste caso não temos repetição de carros portanto todos os carros possum um
único valor, não cabendo uma agregação por média
'''

'''
Falta
* lookup (equivale ao join)
* unwind (quase equivalente ao concat)
* project (quase equivalente ao select)
* Match (quase como find())
'''

'''
1 - Faça uma consulta que retorne os documentos da coleção
cliente que sejam de Duque de Caxias e do sexo Feminino
'''

'''
2 - Faça uma consulta que retorne todos os carros que sejam da marca Fiat ou Renault
'''

'''
3 - Faça uma consulta que retorne a soma de todos os códigos de carros
'''

'''
4 - Retorne os documentos da coleção aluguem do dia 21/04/2023
'''

'''
5 - Retorne todos os documentos da colecção de carros cujo valor seja maior que
150
'''

"""# Joins"""

'''
$lookup
$unwind
$project
'''

'''
list(db.colecao1.aggregate([{'$lookup':{'from':'colecao2','localField':'chave_colecao1','foreignField':'chave_colecao2','as':'alias_resultante'}},
{'$unwind':$alias_resultante},{'$project':{'_id':0,'campo_colecao1':1,'campo_resultante':'$campo_resultante_1'}}]))
'''

# Exemplo
a = list(db.carro.aggregate([
    {'$lookup':
                {'from':'marca','localField':'codmarca','foreignField':'codmarca','as':'carro_marca'}},

    {'$unwind':'$carro_marca'},

    {'$project':{'_id':0,'modelo':1,'marca':'$carro_marca.marca'}}]))
df = pd.DataFrame(a)
display(df)

a = list(db.aluguel.aggregate([
    {'$lookup':{
        'from':'carro',
        'localField':'codcarro',
        'foreignField':'codcarro',
        'as':'aluguel_carro'
    }}
    ,{'$unwind':'$aluguel_carro'},
     {
      '$lookup':{
         'from':'cliente',
         'localField':'codcliente',
         'foreignField':'codcliente',
         'as':'completo'
      }
    },

    {'$unwind':'$completo'},

   {'$project':{
       '_id':0,
       'codaluguel':1,
       'codcliente':1,
       'codcarro':1,
       'data_aluguel':1,
       'codmarca':'$aluguel_carro.codmarca',
       'modelo':'$aluguel_carro.modelo',
       'valor':'$aluguel_carro.valor',
       'nome':'$completo.nome',
       'cidade':'$completo.cidade',
       'sexo':'$completo.sexo',
       'estado':'$completo.estado',
       'estadocivil':'$completo.estadocivil'
       }}

]))
df = pd.DataFrame(a)
display(df)

'''
Faça uma consulta que retorne os modelos e as datas em que foram alugados
'''
a = list(db.aluguel.aggregate([
    {'$lookup':
                {'from':'carro','localField':'codcarro','foreignField':'codcarro','as':'aluguel_carro'}},

    {'$unwind':'$aluguel_carro'},

    {'$project':{'_id':0,'data_aluguel':1,'modelo':'$aluguel_carro.modelo'}}]))
df = pd.DataFrame(a)
display(df)

'''
Faça uma consulta que retorne O nome dos clientes, os modelos alugados e as datas
dos alugueis
'''
a = list(db.aluguel.aggregate([
    {'$lookup':{
        'from':'carro',
        'localField':'codcarro',
        'foreignField':'codcarro',
        'as':'aluguel_carro'
    }}
    ,{'$unwind':'$aluguel_carro'},
     {
      '$lookup':{
         'from':'cliente',
         'localField':'codcliente',
         'foreignField':'codcliente',
         'as':'completo'
      }
    },

    {'$unwind':'$completo'},

   {'$project':{
       '_id':0,
       'nome':'$completo.nome',
       #'codaluguel':1,
       #'codcliente':1,
       #'codcarro':1,
       'data_aluguel':1,
       #'codmarca':'$aluguel_carro.codmarca',
       'modelo':'$aluguel_carro.modelo',
       #'valor':'$aluguel_carro.valor',
       #'cidade':'$completo.cidade',
       #'sexo':'$completo.sexo',
       #'estado':'$completo.estado',
       #'estadocivil':'$completo.estadocivil'
       }}

]))
df = pd.DataFrame(a)
display(df)

#Alternativa para colocar o nome como primeiro atributo
'''
Faça uma consulta que retorne O nome dos clientes, os modelos alugados e as datas
dos alugueis
'''
a = list(db.cliente.aggregate([
    {'$lookup':{
        'from':'aluguel',
        'localField':'codcliente',
        'foreignField':'codcliente',
        'as':'cliente_aluguel'
    }}
    ,{'$unwind':'$cliente_aluguel'},
     {
      '$lookup':{
         'from':'carro',
         'localField':'cliente_aluguel.codcarro',
         'foreignField':'codcarro',
         'as':'completo'
      }
    },

    {'$unwind':'$completo'},

   {'$project':{
       '_id':0,
       'nome':1,
       #'codaluguel':1,
       #'codcliente':1,
       #'codcarro':1,
       'data_aluguel':'$cliente_aluguel.data_aluguel',
       #'codmarca':'$aluguel_carro.codmarca',
       'modelo':'$completo.modelo',
       #'valor':'$aluguel_carro.valor',
       #'cidade':'$completo.cidade',
       #'sexo':'$completo.sexo',
       #'estado':'$completo.estado',
       #'estadocivil':'$completo.estadocivil'
       }}

]))
df = pd.DataFrame(a)
display(df)

'''
Faça uma consulta que retorne nome, modelo e data de aluguel, para todos os
documentos que contenham o nome Bruna Pereira ou os modelos de carros Ka ou Polo
'''
a = list(db.aluguel.aggregate([
    {'$lookup': {
        'from': 'carro',
        'localField': 'codcarro',
        'foreignField': 'codcarro',
        'as': 'aluguel_carro'
    }},
    {'$unwind': '$aluguel_carro'},
    {'$lookup': {
        'from': 'cliente',
        'localField': 'codcliente',
        'foreignField': 'codcliente',
        'as': 'completo'
    }},
    {'$unwind': '$completo'},
    {'$match': {
        '$or': [
            {'completo.nome': 'Bruna Pereira'},  # Nome específico
            {'aluguel_carro.modelo': {'$in': ['Ka', 'Polo']}}  # Modelos específicos
        ]
    }},
    {'$project': {
        '_id': 0,
        'nome': '$completo.nome',
        'data_aluguel': 1,
        'modelo': '$aluguel_carro.modelo'
    }}
]))

df = pd.DataFrame(a)
display(df)

'''
Faça uma consulta que retorne nome, modelo e data de aluguel, para todos os
documentos que contenham o nome Bruna Pereira e os modelos de carros Ka ou Polo
'''
a = list(db.aluguel.aggregate([
    {'$lookup': {
        'from': 'carro',
        'localField': 'codcarro',
        'foreignField': 'codcarro',
        'as': 'aluguel_carro'
    }},
    {'$unwind': '$aluguel_carro'},
    {'$lookup': {
        'from': 'cliente',
        'localField': 'codcliente',
        'foreignField': 'codcliente',
        'as': 'completo'
    }},
    {'$unwind': '$completo'},
    {'$match': {
        '$and': [
            {'completo.nome': 'Bruna Pereira'},  # Nome específico
            {'aluguel_carro.modelo': {'$in': ['Ka', 'Polo']}}  # Modelos específicos
        ]
    }},
    {'$project': {
        '_id': 0,
        'nome': '$completo.nome',
        'data_aluguel': 1,
        'modelo': '$aluguel_carro.modelo'
    }}
]))

df = pd.DataFrame(a)
display(df)

'''
Crie uma consulta para gerar um relatório que
agrupe os modelos de carros alugados, exibindo:
O nome do modelo de carro.
O total de vezes que o modelo foi alugado
(quantidade de registros de aluguel).
Uma lista única com os nomes dos clientes que alugaram cada
modelo de carro. (By Cristiano)
'''
a = list(db.aluguel.aggregate([
    {'$lookup': {
        'from': 'carro',
        'localField': 'codcarro',
        'foreignField': 'codcarro',
        'as': 'aluguel_carro'
    }},
    {'$unwind': '$aluguel_carro'},
    {'$lookup': {
        'from': 'cliente',
        'localField': 'codcliente',
        'foreignField': 'codcliente',
        'as': 'completo'
    }},
    {'$unwind': '$completo'},
    {'$group': {
        '_id': '$aluguel_carro.modelo',  # Agrupando pelo modelo do carro
        'clientes_unicos': {'$addToSet': '$completo.nome'},  # Lista única de clientes por modelo O papel do group_concat
        'total_alugueis': {'$sum': 1}  # Contagem total de alugueis por modelo
    }},
    {'$project': {
        '_id': 0,
        'modelo': '$_id',
        'total_alugueis': 1,
        'clientes_unicos': 1
    }}
]))

df = pd.DataFrame(a)
display(df)

'''
Crie uma consulta para gerar um relatório que
agrupe os modelos de carros alugados, exibindo:
O nome do modelo de carro.
O total de vezes que o modelo foi alugado
(quantidade de registros de aluguel).
Uma lista única com os nomes dos clientes que alugaram cada
modelo de carro. (By Cristiano)
Ordenando pela quantidade de aluguéis de forma inversa
'''
a = list(db.aluguel.aggregate([
    {'$lookup': {
        'from': 'carro',
        'localField': 'codcarro',
        'foreignField': 'codcarro',
        'as': 'aluguel_carro'
    }},
    {'$unwind': '$aluguel_carro'},
    {'$lookup': {
        'from': 'cliente',
        'localField': 'codcliente',
        'foreignField': 'codcliente',
        'as': 'completo'
    }},
    {'$unwind': '$completo'},
    {'$group': {
        '_id': '$aluguel_carro.modelo',  # Agrupando pelo modelo do carro
        'clientes_unicos': {'$addToSet': '$completo.nome'},  # Lista única de clientes por modelo
        'total_alugueis': {'$sum': 1}  # Contagem total de alugueis por modelo
    }},
    {'$sort': {
        'total_alugueis': -1  # Ordenação decrescente pelos alugueis
    }},
    {'$project': {
        '_id': 0,
        'modelo': '$_id',
        'total_alugueis': 1,
        'clientes_unicos': 1
    }}
]))

df = pd.DataFrame(a)
display(df)

"""# Exercícios"""

'''
 1 - Encontre todos os aluguéis e o estado civil dos clientes que alugaram os
 carros.
'''
a = list(db.aluguel.aggregate([
    {'$lookup': {
        'from': 'carro',
        'localField': 'codcarro',
        'foreignField': 'codcarro',
        'as': 'aluguel_carro'
    }},
    {'$unwind': '$aluguel_carro'},
    {'$lookup': {
        'from': 'cliente',
        'localField': 'codcliente',
        'foreignField': 'codcliente',
        'as': 'completo'
    }},
    {'$unwind': '$completo'},
    {'$project': {
        '_id': 0,
        'data_aluguel': 1,
        'modelo': '$aluguel_carro.modelo',
        'nome': '$completo.nome',
        'estadocivil': '$completo.estadocivil'
    }}
]))

df = pd.DataFrame(a)
display(df)

'''
2 - Liste os clientes e as cidades em que moram para aqueles que alugaram carros.
'''
a = list(db.aluguel.aggregate([
    {'$lookup': {
        'from': 'cliente',
        'localField': 'codcliente',
        'foreignField': 'codcliente',
        'as': 'cliente_info'
    }},
    {'$unwind': '$cliente_info'},
    {'$project': {
        '_id': 0,
        'nome': '$cliente_info.nome',
        'cidade': '$cliente_info.cidade'
    }},
    {'$group': {
        '_id': {
            'nome': '$nome',
            'cidade': '$cidade'
        }}},
    {'$project': {
        '_id': 0,
        'nome': '$_id.nome',
        'cidade': '$_id.cidade'
    }}
]))

df = pd.DataFrame(a)
display(df)

'''
3 - Liste os clientes que alugaram carros e os modelos de carros que eles
alugaram, incluindo a marca do carro.
'''
a = list(db.aluguel.aggregate([
    {'$lookup': {
        'from': 'carro',
        'localField': 'codcarro',
        'foreignField': 'codcarro',
        'as': 'carro_info'
    }},
    {'$unwind': '$carro_info'},
    {'$lookup': {
        'from': 'cliente',
        'localField': 'codcliente',
        'foreignField': 'codcliente',
        'as': 'cliente_info'
    }},
    {'$unwind': '$cliente_info'},

    {'$lookup': {
        'from': 'marca',
        'localField': 'carro_info.codmarca',
        'foreignField': 'codmarca',
        'as': 'marca_info'
    }},
    {'$unwind': '$marca_info'},


    {'$project': {
        '_id': 0,
        'nome_cliente': '$cliente_info.nome',
        'modelo_carro': '$carro_info.modelo',
        'marca_carro': '$marca_info.marca'
    }}
]))

df = pd.DataFrame(a)
display(df)

# Alternativa
a = list(db.aluguel.aggregate([
    {'$lookup': {
        'from': 'carro',
        'localField': 'codcarro',
        'foreignField': 'codcarro',
        'as': 'carro_info'
    }},
    {'$unwind': '$carro_info'},
    {'$lookup': {
        'from': 'cliente',
        'localField': 'codcliente',
        'foreignField': 'codcliente',
        'as': 'cliente_info'
    }},
    {'$unwind': '$cliente_info'},

    {'$lookup': {
        'from': 'marca',
        'localField': 'carro_info.codmarca',
        'foreignField': 'codmarca',
        'as': 'marca_info'
    }},
    {'$unwind': '$marca_info'},


    {'$group': {
        '_id': '$cliente_info.nome',
        'carros_alugados': {'$addToSet': '$carro_info.modelo'},
        'marcas':{'$addToSet':'$marca_info.marca'}
    }},
    {'$project': {
        '_id': 0,
        'nome_cliente': '$_id',
        'carros_alugados': 1,
        'marcas':1
    }}
]))

df = pd.DataFrame(a)
display(df)

'''
4 - Encontre todos os aluguéis realizados em uma cidade específica e liste os
nomes dos clientes e os modelos de carros alugados.
'''
cidade_especifica = input('Informe a cidade que deseja consultar: ')  # Substitua pela cidade desejada

a = list(db.aluguel.aggregate([
    {'$lookup': {
        'from': 'cliente',
        'localField': 'codcliente',
        'foreignField': 'codcliente',
        'as': 'cliente_info'
    }},
    {'$unwind': '$cliente_info'},
    {'$lookup': {
        'from': 'carro',
        'localField': 'codcarro',
        'foreignField': 'codcarro',
        'as': 'carro_info'
    }},
    {'$unwind': '$carro_info'},
    {'$match': {
        'cliente_info.cidade': cidade_especifica  # Filtra pela cidade específica
    }},
    {'$project': {
        '_id': 0,
        'nome_cliente': '$cliente_info.nome',
        'modelo_carro': '$carro_info.modelo'
    }}
]))

df = pd.DataFrame(a)
display(df)

'''
5 - Liste os modelos de carros e a quantidade de vezes que foram alugados.
'''
a = list(db.aluguel.aggregate([
    {'$lookup': {
        'from': 'carro',
        'localField': 'codcarro',
        'foreignField': 'codcarro',
        'as': 'carro_info'
    }},
    {'$unwind': '$carro_info'},
    {'$group': {
        '_id': '$carro_info.modelo',  # Agrupa pelo modelo do carro
        'total_alugueis': {'$sum': 1}  # Soma a quantidade de aluguéis
    }},
    {'$project': {
        '_id': 0,
        'modelo_carro': '$_id',
        'quantidade_alugueis': '$total_alugueis'
    }},
    {'$sort': {
        'quantidade_alugueis': -1  # Ordena por quantidade de aluguéis em ordem decrescente
    }}
]))

df = pd.DataFrame(a)
display(df)

'''
6 - Encontre os clientes que alugaram mais de um carro.
'''
a = list(db.aluguel.aggregate([
    {'$group': {
        '_id': '$codcliente',  # Agrupa por cliente
        'total_alugueis': {'$sum': 1}  # Conta o número de aluguéis por cliente
    }},
    {'$match': {
        'total_alugueis': {'$gt': 1}  # Filtra clientes com mais de um aluguel
    }},
    {'$lookup': {
        'from': 'cliente',
        'localField': '_id',
        'foreignField': 'codcliente',
        'as': 'cliente_info'
    }},
    {'$unwind': '$cliente_info'},
    {'$project': {
        '_id': 0,
        'nome_cliente': '$cliente_info.nome',
        'total_alugueis': 1
    }},
    {'$sort': {
        'total_alugueis': -1  # Ordena por quantidade de aluguéis em ordem decrescente
    }}
]))

df = pd.DataFrame(a)
display(df)

'''
7 - Liste os clientes que alugaram carros mais de uma vez e os modelos e
marcas dos carros que alugaram.
'''
a = list(db.aluguel.aggregate([
    {'$lookup': {
        'from': 'carro',
        'localField': 'codcarro',
        'foreignField': 'codcarro',
        'as': 'carro_info'
    }},
    {'$unwind': '$carro_info'},
    {'$lookup': {
        'from': 'cliente',
        'localField': 'codcliente',
        'foreignField': 'codcliente',
        'as': 'cliente_info'
    }},
    {'$unwind': '$cliente_info'},
    {'$group': {
        '_id': '$codcliente',  # Agrupa por cliente
        'nome_cliente': {'$first': '$cliente_info.nome'},  # Mantém o nome do cliente
        'carros_alugados': {'$addToSet': '$carro_info.modelo'},  # Apenas o nome do modelo
        'total_alugueis': {'$sum': 1}  # Conta o número de aluguéis
    }},
    {'$match': {
        'total_alugueis': {'$gt': 1}  # Filtra clientes com mais de um aluguel
    }},
    {'$project': {
        '_id': 0,
        'nome_cliente': 1,
        'total_alugueis': 1,
        'carros_alugados': 1  # Apenas os nomes dos modelos
    }},
    {'$sort': {
        'total_alugueis': -1  # Ordena por quantidade de aluguéis em ordem decrescente
    }}
]))

df = pd.DataFrame(a)
display(df)