# -*- coding: utf-8 -*-
"""Gabarito Exercícios Pandas

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LjQAKR7BiRf5_6tmTaKLBrsT2ogHioGG
"""

!pip install pymongo

!curl ipecho.net/plain

import pandas as pd

cliente = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vQW3fP3j4qoiMGBXDAGzg_9IW2b3zgjdkVKLsURNVe9QezpHXimWfKle_55CQQtkeWL69OAASBDNdk8/pub?gid=2073489257&single=true&output=csv')
display(cliente)

aluguel = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vRncyLGO1iOo2H53JaryzVF1GPjUhWl9DsN7TZROCDxaP85iCwl5aW5ffBEzqtpAMRNYkd7eO5ehmgn/pub?gid=1581881382&single=true&output=csv')
display(aluguel)

carro = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vSznlX7UXeH_LeKcNteiDnWvdwZyydAQl0_x8NU9cx6G00Zh7SMrjoUuNpytVq7U-iQVzQNJ7jC7GpY/pub?gid=306989914&single=true&output=csv')
display(carro)

marca = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vSI-4_QEFwZ6eDGwUDlip0_PGBn7d_F7j59UwXmRvWbQFyy01ENPatjkbO1E8k5ZW5lqSY9ox112j7X/pub?gid=1160143272&single=true&output=csv')
display(marca)

from pymongo import MongoClient
import pandas as pd

# Conectar ao MongoDB Atlas
client = MongoClient("mongodb+srv://douglasdealmeidaribeiro:5PZRJQGJzBAFs1lH@cluster0.xu3hl.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0")
db = client['locadora']  # Nome do banco de dados

# Carregar os dados dos CSVs
aluguel = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vRncyLGO1iOo2H53JaryzVF1GPjUhWl9DsN7TZROCDxaP85iCwl5aW5ffBEzqtpAMRNYkd7eO5ehmgn/pub?gid=1581881382&single=true&output=csv')
carro = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vSznlX7UXeH_LeKcNteiDnWvdwZyydAQl0_x8NU9cx6G00Zh7SMrjoUuNpytVq7U-iQVzQNJ7jC7GpY/pub?gid=306989914&single=true&output=csv')
cliente = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vQW3fP3j4qoiMGBXDAGzg_9IW2b3zgjdkVKLsURNVe9QezpHXimWfKle_55CQQtkeWL69OAASBDNdk8/pub?gid=2073489257&single=true&output=csv')
marca = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vSI-4_QEFwZ6eDGwUDlip0_PGBn7d_F7j59UwXmRvWbQFyy01ENPatjkbO1E8k5ZW5lqSY9ox112j7X/pub?gid=1160143272&single=true&output=csv')

# Converter os DataFrames para listas de dicionários
aluguel_data = aluguel.to_dict(orient='records')
carro_data = carro.to_dict(orient='records')
cliente_data = cliente.to_dict(orient='records')
marca_data = marca.to_dict(orient='records')

# Inserir os dados nas coleções do MongoDB
aluguel_collection = db['aluguel']
aluguel_collection.insert_many(aluguel_data)

carro_collection = db['carro']
carro_collection.insert_many(carro_data)

cliente_collection = db['cliente']
cliente_collection.insert_many(cliente_data)

marca_collection = db['marca']
marca_collection.insert_many(marca_data)

print("Dados inseridos com sucesso no MongoDB Atlas!")

"""# Exercícios"""

'''
1 - Selecione todos os dados da tabela cliente
'''
display(cliente)

'''
2 - Liste todos os clientes que moram na cidade de "São Paulo".
'''
cliente.query('cidade == "São Paulo"')[['nome','cidade']]

'''
3 - Liste os estados diferentes presentes na tabela cliente.
'''
cliente[['estado']].groupby('estado').count()

'''
4 - Liste todos os clientes ordenados pelo nome em ordem alfabética.
'''
cliente.sort_values(by='nome')['nome']

'''
5 - Encontre todos os clientes que são do sexo feminino e solteiros.
'''
cliente.query('sexo == "F" & estadocivil == "S"')[['nome', 'estadocivil']]

'''
6 - Liste todos os clientes cujo nome começa com a letra 'A'.
'''
cliente[cliente['nome'].str.startswith('A')]['nome']

# Alternattiva
'''
6 - Liste todos os clientes cujo nome começa com a letra 'A'.
'''
nomes = list(cliente.nome)
for nome in nomes:
  if nome.startswith('A'):
    print(nome)
  else:
    pass

'''
7 - Selecione os 3 primeiros registros da tabela cliente.
'''
cliente.head(3)

'''
8 - Liste todos os carros que são da marca 'Ford' ou 'Fiat'.
'''
a = pd.merge(carro, marca, on='codmarca', how='inner')[['marca','modelo']]
a.query('marca == "Ford" | marca == "Fiat" ')

# Alternativa
'''
8 - Liste todos os carros que são da marca 'Ford' ou 'Fiat'.
'''
a = pd.merge(carro, marca, on='codmarca', how='inner')[['marca','modelo']]
a[a['marca'].isin(['Ford','Fiat'])]

'''
9 - Encontre todos os carros cujo valor está entre 100 e 150.
'''
(carro.query('valor >= 100 & valor <= 150')[['modelo','valor']]
.sort_values(by='valor'))

'''
10 - Conte quantos aluguéis foram realizados.
'''
aluguel.codaluguel.count()

'''
11 - Calcule o valor total de todos os carros disponíveis para aluguel.
'''
carro.valor.sum()

'''
12 - Calcule o valor médio dos carros.
'''
carro.valor.mean()

'''
13 - Encontre o menor e o maior valor de aluguel de carros.
'''
print(carro.valor.min())
print(carro.valor.max())

'''
14 - Agrupe os clientes por estado e conte quantos clientes existem em cada
estado.
'''
a = cliente[['estado','codcliente']].groupby('estado').count()
a.rename({'codcliente':'total_clientes'}, axis=1, inplace=True)
display(a)

a.info()

# Alternativa
'''
14 - Agrupe os clientes por estado e conte quantos clientes existem em cada
estado.
'''
a = (cliente.groupby('estado', as_index=False)
.agg(total_clientes=('codcliente','count')))
display(a)

a.info()

'''
15 - Agrupe os aluguéis por cliente e filtre apenas aqueles que fizeram mais de
2 aluguéis.
'''
(pd.merge(aluguel, cliente, on='codcliente', how='inner').groupby('nome')
.agg(qtde_alugueis=('codaluguel','count')).query('qtde_alugueis > 2'))

'''
16 - Liste todos os aluguéis, mostrando o nome do cliente e o modelo do carro
alugado.
'''
a = pd.merge(carro, aluguel, on='codcarro', how='inner')
(pd.merge(a,cliente, on='codcliente', how='inner')[['nome', 'modelo']]
.sort_values(by='nome'))

# Alternativa
'''
16 - Liste todos os aluguéis, mostrando o nome do cliente e o modelo do carro
alugado.
'''
# Fazendo os merges
a = pd.merge(carro, aluguel, on='codcarro', how='inner')
res = pd.merge(a, cliente, on='codcliente', how='inner')[['nome', 'modelo']]
# Agrupando por cliente e consolidando os modelos em uma única linha
res.groupby('nome', as_index=False).agg({'modelo': ', '.join})

'''
17 - Liste todos os carros e, se houver, as informações sobre os aluguéis
realizados desses carros.
'''
(carro.merge(aluguel, on='codcarro', how='left')[['modelo','data_aluguel']]
.sort_values(by='data_aluguel'))

# Alternativa
'''
17 - Liste todos os carros e, se houver, as informações sobre os aluguéis
realizados desses carros.
'''
# Fazendo os merges
a = (pd.merge(carro, aluguel, on='codcarro', how='inner')
[['modelo','data_aluguel']])

# Agrupando por cliente e consolidando os modelos em uma única linha
a.groupby('modelo', as_index=False).agg({'data_aluguel': ' --- '.join})

'''
18 - Liste todos os aluguéis e as informações sobre os carros alugados, mesmo
que o carro não esteja mais no banco de dados.
'''
(aluguel.merge(carro, on='codcarro', how='left')[['modelo','data_aluguel']]
.sort_values(by='data_aluguel'))

'''
19 - Liste todos os clientes e os carros que alugaram, incluindo clientes que
não alugaram e carros que não foram alugados.
'''
(cliente.merge(aluguel, on='codcliente', how='outer')
.merge(carro, on='codcarro', how='outer').sort_values(by='nome')
[['nome','modelo']])

'''
20 - Combine os resultados de duas consultas: uma que lista clientes solteiros
e outra que lista clientes casados.
'''
clientes_solteiros = cliente[cliente['estadocivil'] == 'S']
clientes_casados = cliente[cliente['estadocivil'] == 'C']
pd.concat([clientes_solteiros, clientes_casados], ignore_index=True)

'''
21 - Encontre os clientes que alugaram o carro com modelo 'Onix'.
'''
(pd.merge(cliente, aluguel, on='codcliente', how='inner')
.merge(carro, on='codcarro', how='inner')
.query('modelo == "Onix"')[['nome','modelo']])

'''
22 - Liste os modelos de carros e o número de vezes que cada um foi alugado.
'''
a = pd.merge(carro, aluguel, on='codcarro', how='inner')
(a.groupby('modelo', as_index=False).agg(qtde_alugueis=('codaluguel','count'))
.sort_values(by='qtde_alugueis', ascending=False))

# alternativa
'''
22 - Liste os modelos de carros e o número de vezes que cada um foi alugado.
'''
a = pd.merge(carro, aluguel, on='codcarro', how='left')
(a.groupby('modelo', as_index=False).agg(qtde_alugueis=('codaluguel','count'))
.sort_values(by='qtde_alugueis', ascending=False))

'''
23 - Liste o nome dos clientes e o número de aluguéis que cada um fez.
'''
a = pd.merge(cliente, aluguel, on='codcliente', how='inner')
a.groupby('nome', as_index=False).agg(qtde_alugueis=('codaluguel','count'))

# Alternativa
'''
23 - Liste o nome dos clientes e o número de aluguéis que cada um fez.
'''
a = pd.merge(cliente, aluguel, on='codcliente', how='left')
(a.groupby('nome', as_index=False).agg(qtde_alugueis=('codaluguel','count'))
.sort_values(by='qtde_alugueis', ascending=False))

'''
24 - Crie uma consulta que retorne o nome dos clientes e uma coluna adicional
chamada status_civil que classifica os clientes como "Solteiro" ou "Casado".
'''
status_civil = []
for estado in cliente['estadocivil']:
    if estado == 'S':
        status_civil.append('Solteiro')
    else:
        status_civil.append('Casado')

cliente['status_civil'] = status_civil
cliente[['nome','status_civil']]

# Alternativa
'''
24 - Crie uma consulta que retorne o nome dos clientes e uma coluna adicional
chamada status_civil que classifica os clientes como "Solteiro" ou "Casado".
'''
cliente['status_civil'] = cliente['estadocivil'].map({'S': 'Solteiro',
                                                      'C': 'Casado'})
cliente[['nome','status_civil']].sort_values(by='nome')

'''
25 - Liste os nomes dos clientes e as datas em que alugaram carros.
'''
# Fazendo os merges
a = pd.merge(cliente, aluguel, on='codcliente', how='inner')[['nome',
                                                              'data_aluguel']]

# Agrupando por cliente e consolidando os modelos em uma única linha
a.groupby('nome', as_index=False).agg({'data_aluguel': ', -- '.join})

'''
26 - Liste todos os modelos de carros e suas respectivas marcas.
'''
pd.merge(marca, carro, on='codmarca', how='inner')[['marca','modelo']]

'''
27 - Liste todos os aluguéis e os nomes dos clientes que os realizaram.
'''
(pd.merge(aluguel, cliente, on='codcliente', how='inner')
.merge(carro, on='codcarro', how='inner')[['nome','modelo','data_aluguel']]
.sort_values(by='nome'))

'''
28 - Encontre o nome dos clientes e os modelos de carros que alugaram.
'''
a = (pd.merge(aluguel, cliente, on='codcliente', how='inner')
.merge(carro, on='codcarro', how='inner')[['nome','modelo']])
a.groupby('nome', as_index=False).agg({'modelo': ' -- '.join})

'''
29 - Liste todos os carros e, se houver, mostre as datas em que foram alugados.
'''
(carro.merge(aluguel, on='codcarro', how='left')[['modelo','data_aluguel']]
.sort_values(by='data_aluguel'))

'''
30 - Encontre os clientes que moram na mesma cidade e estado e
que alugaram carros.
'''

(cliente.merge(aluguel, on='codcliente', how='inner')
.groupby(['cidade', 'estado']).agg({'nome': ', '.join}).reset_index())

'''
 31 - Liste os nomes dos clientes e os carros que eles alugaram, incluindo os
clientes que não alugaram nenhum carro.
'''
(cliente.merge(aluguel, on='codcliente', how='left')
.merge(carro, on='codcarro', how='left')
[['nome', 'modelo']]).sort_values(by='nome')

'''
32 - Liste todas as marcas e, se houver, os modelos de carros associados.
'''
marca.merge(carro, on='codmarca', how='left')[['marca', 'modelo']]

'''
33 - Encontre todos os aluguéis e o estado civil dos clientes que alugaram os
carros.
'''
(aluguel.merge(cliente, on='codcliente')[['nome', 'estadocivil','data_aluguel']]
.sort_values(by='nome'))

'''
34 - Liste os clientes e as cidades em que moram para aqueles que alugaram
carros.
'''
(aluguel.merge(cliente, on='codcliente')[['nome', 'cidade','data_aluguel']]
.sort_values(by='nome'))

'''
35 - Liste os clientes que alugaram carros e os modelos de carros que eles
alugaram, incluindo a marca do carro.
'''
(aluguel.merge(carro, on='codcarro').merge(marca, on='codmarca').
 merge(cliente, on='codcliente')[['nome', 'modelo', 'marca','data_aluguel']]
 .sort_values(by=['nome','modelo']))

'''
36 - Encontre todos os aluguéis realizados em uma cidade específica e liste os
nomes dos clientes e os modelos de carros alugados.
'''
(aluguel.merge(carro, on='codcarro').merge(cliente, on='codcliente')
.query('cidade == "Duque de Caxias"')
[['nome', 'modelo', 'cidade','data_aluguel']].sort_values(by='nome'))

'''
37 - Liste os modelos de carros e a quantidade de vezes que foram alugados.
'''
(carro.merge(aluguel, on='codcarro',how='left')
.groupby('modelo', as_index=False).agg(qtde_alugueis=('codaluguel','count'))
.sort_values(by='qtde_alugueis', ascending=False))

# Alternativa
'''
37 - Liste os modelos de carros e a quantidade de vezes que foram alugados.
'''
(carro.merge(aluguel, on='codcarro',how='inner')
.groupby('modelo',as_index=False).agg(qtde_alugueis=('codaluguel','count'))
.sort_values(by='qtde_alugueis', ascending=False))

'''
38 - Encontre os clientes que alugaram mais de um carro.
'''
(pd.merge(aluguel, cliente, on='codcliente', how='inner').groupby('nome')
.agg(qtde_alugueis=('codaluguel','count')).query('qtde_alugueis > 1'))

'''
39 - Liste os clientes, as datas de aluguel e o valor do carro alugado.
'''
(aluguel.merge(carro, on='codcarro').merge(marca, on='codmarca').
 merge(cliente, on='codcliente')[['nome','modelo','valor','data_aluguel']]
.sort_values(by='nome'))

'''
40 - Liste os modelos de carros que nunca foram alugados.
'''
(carro.merge(aluguel, on='codcarro',how='left')
.groupby('modelo', as_index=False).agg(qtde_alugueis=('codaluguel','count'))
.query('qtde_alugueis == 0'))

# Alternativa
'''
40 - Liste os modelos de carros que nunca foram alugados.
'''
carro[~carro['codcarro'].isin(aluguel['codcarro'])]['modelo']

'''
41 - Encontre os clientes que alugaram carros e o total gasto em aluguéis.
'''
(aluguel.merge(carro, on='codcarro').merge(cliente, on='codcliente')
.groupby('nome',as_index=False)['valor'].sum())

'''
42 - Liste as marcas de carros e o número total de aluguéis por marca.
'''
(aluguel.merge(carro, on='codcarro').merge(marca, on='codmarca')
.groupby('marca', as_index=False)['codaluguel'].count()
.sort_values(by='codaluguel',ascending=False).reset_index(drop=True))

'''
43 - Encontre os clientes que alugaram carros em um determinado mês e ano,
listando os modelos de carros e as datas de aluguel.
'''
# Exemplo: abril de 2023
a = aluguel.merge(carro, on='codcarro').merge(cliente, on='codcliente')
a = (a[(pd.to_datetime(a['data_aluguel'])
.dt.month == 4) & (pd.to_datetime(a['data_aluguel']).dt.year == 2023)]
 [['nome', 'modelo', 'data_aluguel']].sort_values(by='nome'))
display(a)

'''
44 - Liste os clientes que moram em estados diferentes e que alugaram carros,
junto com os modelos alugados.
'''
(aluguel.merge(carro, on='codcarro').merge(cliente, on='codcliente')
.groupby(['nome']).agg({'modelo':', '.join,'estado': ', '.join}).reset_index())

'''
45 - Encontre os clientes que alugaram carros, os modelos de carros alugados, as
marcas desses carros e as datas de aluguel, ordenando pelos nomes dos clientes.
'''
(aluguel.merge(carro, on='codcarro').merge(marca, on='codmarca')
.merge(cliente, on='codcliente')[['nome', 'modelo', 'marca', 'data_aluguel']]
 .sort_values(by='nome'))

'''
46 - Liste os clientes que alugaram carros mais de uma vez e os detalhes dos
carros que alugaram.
'''
a = aluguel.groupby('codcliente')['codaluguel'].count()
a = a[a > 1].index
b = (aluguel.merge(carro, on='codcarro').merge(cliente, on='codcliente')
.merge(marca,on='codmarca',how='inner'))
(b[b['codcliente'].isin(a)][['nome','modelo','marca','data_aluguel']]
 .sort_values(by='nome'))

'''
47 - Encontre os modelos de carros que foram alugados por clientes de cidades
específicas e liste as marcas desses carros.
'''
cidades = ["São Paulo", "Niterói"]  # Substitua pelas cidades desejadas
a = (aluguel.merge(carro, on='codcarro').merge(cliente, on='codcliente')
.merge(marca, on='codmarca'))
a[a['cidade'].isin(cidades)][['modelo', 'marca', 'cidade']]

'''
48 - Liste os clientes que alugaram carros, os modelos e as marcas dos carros,
e o total gasto em aluguéis, agrupado por cliente.
'''
# Faz os merges entre os DataFrames
a = (
    aluguel
    .merge(carro, on='codcarro')
    .merge(cliente, on='codcliente')
    .merge(marca, on='codmarca')
)

# Funções auxiliares
def unicos(series):
    return ', '.join(series.drop_duplicates().astype(str))

# Agrupamento e agregação
a = (
    a.groupby('nome')
    .agg(
        total_gasto=('valor', 'sum'),
        carros=('modelo', unicos),
        marcas=('marca', unicos)
    )
    .reset_index()
)

display(a)

# Alternativa
'''
48 - Liste os clientes que alugaram carros, os modelos e as marcas dos carros,
e o total gasto em aluguéis, agrupado por cliente.
'''
# Faz os merges entre os DataFrames
a = (
    aluguel
    .merge(carro, on='codcarro')
    .merge(cliente, on='codcliente')
    .merge(marca, on='codmarca')
)

# Agrupamento e agregação usando apenas funções pandas
a = (
    a.groupby('nome')
    .agg(
        total_gasto=('valor', 'sum'),
        carros=('modelo', pd.Series.unique),
        marcas=('marca', pd.Series.unique)
    )
    .reset_index()
)

# Convertendo valores únicos para listas, caso necessário
a['carros'] = a['carros'].map(list)
a['marcas'] = a['marcas'].map(list)

display(a)

# Alternativa
'''
48 - Liste os clientes que alugaram carros, os modelos e as marcas dos carros,
e o total gasto em aluguéis, agrupado por cliente.
'''

a = (aluguel.merge(carro, on='codcarro').merge(cliente, on='codcliente')
.merge(marca, on='codmarca'))

def unicos(series):
    return series.unique().tolist()

a = (a.groupby('nome').agg(total_gasto=('valor', 'sum'),
        carros=('modelo', unicos),marcas=('marca', unicos)).reset_index())
display(a)

'''
49 - Encontre os carros que foram alugados nos últimos 30 dias e os clientes
que os alugaram.
'''
from datetime import datetime, timedelta
hoje = datetime.now()
a = hoje - timedelta(days=30)
b = aluguel.merge(carro, on='codcarro').merge(cliente, on='codcliente')
b = b[
    pd.to_datetime(b['data_aluguel']) >= a
][['nome', 'modelo', 'data_aluguel']]
display(b)

'''
50 - Liste os clientes, os carros que alugaram, as marcas desses carros, e o
valor total gasto em aluguéis, filtrando por um intervalo de datas específico.
'''
data_inicio, data_fim = "2023-04-01", "2023-04-03"
a = (aluguel.merge(carro, on='codcarro')
.merge(cliente, on='codcliente').merge(marca, on='codmarca'))
a = a[
    (pd.to_datetime(a['data_aluguel']) >= pd.to_datetime(data_inicio))
    & (pd.to_datetime(a['data_aluguel']) <= pd.to_datetime(data_fim))
][['nome', 'modelo', 'marca', 'valor', 'data_aluguel']].sort_values(by='nome')
display(a)