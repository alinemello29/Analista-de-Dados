# -*- coding: utf-8 -*-
"""Exercícios Pandas

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KW91VkIKGA0CvbvQTlJ4yIwNDzRGaSxj
"""

import pandas as pd

cliente = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vQW3fP3j4qoiMGBXDAGzg_9IW2b3zgjdkVKLsURNVe9QezpHXimWfKle_55CQQtkeWL69OAASBDNdk8/pub?gid=2073489257&single=true&output=csv')
display(cliente)

aluguel = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vRncyLGO1iOo2H53JaryzVF1GPjUhWl9DsN7TZROCDxaP85iCwl5aW5ffBEzqtpAMRNYkd7eO5ehmgn/pub?gid=1581881382&single=true&output=csv')
display(aluguel)

carro = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vSznlX7UXeH_LeKcNteiDnWvdwZyydAQl0_x8NU9cx6G00Zh7SMrjoUuNpytVq7U-iQVzQNJ7jC7GpY/pub?gid=306989914&single=true&output=csv')
display(carro)

marca = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vSI-4_QEFwZ6eDGwUDlip0_PGBn7d_F7j59UwXmRvWbQFyy01ENPatjkbO1E8k5ZW5lqSY9ox112j7X/pub?gid=1160143272&single=true&output=csv')
display(marca)

"""#Resolução dos exercícios SQL"""

#1. Selecionar todos os dados da tabela cliente
display(cliente)

# 2 - Liste todos os clientes que moram na cidade de "São Paulo".
cliente.query('cidade == "São Paulo"')[['nome', 'cidade']]

# 3 - Liste os estados diferentes presentes na tabela cliente.
cliente[['estado']].groupby('estado').count()

# 4 - Liste todos os clientes ordenados pelo nome em ordem alfabética.
cliente.sort_values(by='nome')['nome']

# 5 - Encontre todos os clientes que são do sexo feminino e solteiros.
cliente.query('sexo == "F" & estadocivil == "S"')[['nome', 'estadocivil']]

# 6 - Liste todos os clientes cujo nome começa com a letra 'A'.
cliente[cliente['nome'].str.startswith('A')]['nome']

# 7 - Selecione os 3 primeiros registros da tabela cliente.
cliente.head(3)

# 8 - Liste todos os carros que são da marca 'Ford' ou 'Fiat'.
a = pd.merge(carro, marca, on='codmarca', how='inner')[['marca', 'modelo']]
a.query('marca == "Ford" | marca == "Fiat"')

# 9 - Encontre todos os carros cujo valor está entre 100 e 150.
carro.query('valor >= 100 & valor <= 150')[['modelo', 'valor']].sort_values(by='valor')

# 10 - Conte quantos aluguéis foram realizados.
aluguel.codaluguel.count()

# 11 - Calcule o valor total de todos os carros disponíveis para aluguel.
carro.valor.sum()

# 12 - Calcule o valor médio dos carros.
carro.valor.mean()

# 13 - Encontre o menor e o maior valor de aluguel de carros.
print(carro.valor.min())
print(carro.valor.max())

# 14 - Agrupe os clientes por estado e conte quantos clientes existem em cada estado.
a = cliente[['estado', 'codcliente']].groupby('estado').count()
a.rename({'codcliente': 'total_clientes'}, axis=1, inplace=True)
display(a)

# 15 - Agrupe os aluguéis por cliente e filtre apenas aqueles que fizeram mais de 2 aluguéis.
(pd.merge(aluguel, cliente, on='codcliente', how='inner')
 .groupby('nome')
 .agg(qtde_alugueis=('codaluguel', 'count'))
 .query('qtde_alugueis > 2'))

# 16 - Liste todos os aluguéis, mostrando o nome do cliente e o modelo do carro alugado.
a = pd.merge(carro, aluguel, on='codcarro', how='inner')
(pd.merge(a, cliente, on='codcliente', how='inner')[['nome', 'modelo']]
 .sort_values(by='nome'))

# 17 - Liste todos os carros e, se houver, as informações sobre os aluguéis realizados desses carros.
a = pd.merge(carro, aluguel, on='codcarro', how='left')
display(a)

# 18 - Liste todos os clientes e os carros que alugaram, incluindo clientes que não alugaram.
a = pd.merge(cliente, aluguel, on='codcliente', how='left')
a = pd.merge(a, carro, on='codcarro', how='left')
display(a[['nome', 'modelo']])

# 19 - Encontre os clientes que alugaram o carro com modelo 'Onix'.
codcarro_onix = carro[carro['modelo'] == 'Onix']['codcarro']
alugueis_onix = aluguel[aluguel['codcarro'].isin(codcarro_onix)]
clientes_onix = cliente[cliente['codcliente'].isin(alugueis_onix['codcliente'])]
display(clientes_onix[['nome', 'cidade', 'estado']])

# 20 - Liste os modelos de carros e o número de vezes que cada um foi alugado.
a = pd.merge(aluguel, carro, on='codcarro', how='inner')
a.groupby('modelo').agg(num_alugueis=('codaluguel', 'count'))

# 21 - Liste todos os clientes que moram na mesma cidade e estado e que alugaram carros.
a = pd.merge(cliente, aluguel, on='codcliente')
a.groupby(['cidade', 'estado']).filter(lambda x: len(x) > 1)

# 22 - Liste todos os carros e, se houver, mostre as datas em que foram alugados.
a = pd.merge(carro, aluguel, on='codcarro', how='left')
display(a[['modelo', 'data_aluguel']])

# 23 - Liste o nome dos clientes e as datas em que alugaram carros.
a = pd.merge(cliente, aluguel, on='codcliente')
display(a[['nome', 'data_aluguel']])

# 24 - Crie uma consulta que retorne o nome dos clientes e uma coluna adicional chamada status_civil.
cliente['status_civil'] = cliente['estadocivil'].map({'C': 'Casado', 'S': 'Solteiro'})
display(cliente[['nome', 'status_civil']])

# 25 - Liste todos os aluguéis e os nomes dos clientes que os realizaram.
a = pd.merge(aluguel, cliente, on='codcliente')
display(a[['codaluguel', 'nome']])

# 26 - Encontre os carros que foram alugados nos últimos 30 dias.
pd.merge(marca, carro, on='codmarca', how='inner')[['marca', 'modelo']]

# 27 - Liste todos os carros e a quantidade de vezes que foram alugados.
carros_alugados = pd.merge(aluguel, carro, on='codcarro')
carros_alugados.groupby('modelo').size()

# 28 - Liste os clientes que alugaram mais de um carro.
a = (pd.merge(aluguel, cliente, on='codcliente', how='inner')
.merge(carro, on='codcarro', how='inner')[['nome','modelo']])
a.groupby('nome', as_index=False).agg({'modelo': ','.join})

# 29 - Encontre o valor total gasto por cada cliente em aluguéis.
total_gasto = pd.merge(aluguel, carro, on='codcarro')
total_gasto['total'] = total_gasto['valor']
total_por_cliente = total_gasto.groupby('codcliente').sum()['total']
display(total_por_cliente)

# 30 - Liste todos os carros que nunca foram alugados
carros_nunca_alugados = carro[~carro['codcarro'].isin(aluguel['codcarro'])]
display(carros_nunca_alugados)

# 31 - Encontre os clientes que alugaram carros e o total gasto em aluguéis.
gastos_clientes = pd.merge(aluguel, carro, on='codcarro')
gastos_clientes = gastos_clientes.groupby('codcliente').agg(total_gasto=('valor', 'sum'))
display(gastos_clientes)

# 32 - Liste todos os modelos de carros e suas respectivas marcas.
a = pd.merge(carro, marca, on='codmarca')
display(a[['modelo', 'marca']])

# 33 - Liste os clientes e as cidades em que moram para aqueles que alugaram carros.
clientes_cidades = pd.merge(cliente, aluguel, on='codcliente')
display(clientes_cidades[['nome', 'cidade']])

# 34 - Encontre clientes que moram em estados diferentes e que alugaram carros.
clientes_diferentes_estados = (pd.merge(cliente, aluguel, on='codcliente')
                                .drop_duplicates(subset=['estado']))
display(clientes_diferentes_estados)

# 35 - Liste os carros que foram alugados e as marcas desses carros.
carros_marcas = pd.merge(aluguel, carro, on='codcarro')
carros_marcas = pd.merge(carros_marcas, marca, on='codmarca')
display(carros_marcas[['modelo', 'marca']])

# 36 - Liste todos os aluguéis e as informações sobre os carros alugados, mesmo que o carro não esteja mais no banco de dados.
a = pd.merge(aluguel, carro, on='codcarro', how='outer')
display(a)

# 37 - Liste os clientes que alugaram carros e os modelos de carros que alugaram.
alugueis_clientes_modelos = pd.merge(aluguel, cliente, on='codcliente')
alugueis_clientes_modelos = pd.merge(alugueis_clientes_modelos, carro, on='codcarro')
display(alugueis_clientes_modelos[['nome', 'modelo']])

# 38 - Liste todos os carros e as datas em que foram alugados.
carros_datas_alugados = pd.merge(carro, aluguel, on='codcarro', how='left')
display(carros_datas_alugados[['modelo', 'data_aluguel']])

# 39 - Encontre os clientes que alugaram carros em um determinado mês e ano.
(aluguel.merge(carro, on='codcarro').merge(marca, on='codmarca').
 merge(cliente, on='codcliente')[['nome','modelo','valor','data_aluguel']]
.sort_values(by='nome'))

# 40 - Liste os modelos de carros que foram alugados por clientes de cidades específicas.
cidades_especificas = ['Duque de Caxias', 'São Paulo']
carros_cidades = pd.merge(aluguel, cliente, on='codcliente')
carros_cidades = carros_cidades[carros_cidades['cidade'].isin(cidades_especificas)]
carros_cidades = pd.merge(carros_cidades, carro, on='codcarro')
display(carros_cidades[['modelo', 'cidade']])

# 41 - Liste os clientes que alugaram carros e o total gasto em aluguéis, agrupado por cliente.
gastos_clientes = pd.merge(aluguel, carro, on='codcarro')
gastos_clientes['total'] = gastos_clientes['valor']
total_gasto_clientes = gastos_clientes.groupby('codcliente').agg(total_gasto=('total', 'sum'))
display(total_gasto_clientes)

# 42 - Liste as marcas de carros e o número total de aluguéis por marca.
marcas_alugueis = pd.merge(aluguel, carro, on='codcarro')
marcas_alugueis = pd.merge(marcas_alugueis, marca, on='codmarca')
marcas_alugueis_grouped = marcas_alugueis.groupby('marca').size()
display(marcas_alugueis_grouped)

# 43 - Encontre os carros que foram alugados nos últimos 30 dias e os clientes que os alugaram.
a = aluguel.merge(carro, on='codcarro').merge(cliente, on='codcliente')
a = (a[(pd.to_datetime(a['data_aluguel'])
.dt.month == 4) & (pd.to_datetime(a['data_aluguel']).dt.year == 2023)]
 [['nome', 'modelo', 'data_aluguel']].sort_values(by='nome'))
display(a)

# 44 - Liste os clientes que moram em estados diferentes e que alugaram carros, junto com os modelos alugados.
clientes_estados_diferentes = pd.merge(cliente, aluguel, on='codcliente')
clientes_estados_diferentes = pd.merge(clientes_estados_diferentes, carro, on='codcarro')
clientes_estados_diferentes_grouped = clientes_estados_diferentes.groupby(['estado', 'modelo']).size()
display(clientes_estados_diferentes_grouped)

# 45 - Encontre os clientes que alugaram carros, os modelos de carros alugados, as marcas desses carros e as datas de aluguel, ordenando pelos nomes dos clientes.
alugueis_completos = pd.merge(aluguel, cliente, on='codcliente')
alugueis_completos = pd.merge(alugueis_completos, carro, on='codcarro')
alugueis_completos = pd.merge(alugueis_completos, marca, on='codmarca')
alugueis_completos = alugueis_completos[['nome', 'modelo', 'marca', 'data_aluguel']].sort_values(by='nome')
display(alugueis_completos)

# 46 - Liste os clientes que alugaram carros mais de uma vez e os detalhes dos carros que alugaram.
alugueis_mult = (pd.merge(aluguel, cliente, on='codcliente')
                 .groupby('nome')
                 .filter(lambda x: len(x) > 1))
alugueis_mult = pd.merge(alugueis_mult, carro, on='codcarro')
display(alugueis_mult[['nome', 'modelo']])

# 47 - Encontre os modelos de carros que foram alugados por clientes de cidades específicas e liste as marcas desses carros.
cidades_especificas = ['Duque de Caxias', 'São Paulo']
carros_cidades = pd.merge(aluguel, cliente, on='codcliente')
carros_cidades = carros_cidades[carros_cidades['cidade'].isin(cidades_especificas)]
carros_cidades = pd.merge(carros_cidades, carro, on='codcarro')
carros_cidades = pd.merge(carros_cidades, marca, on='codmarca')
display(carros_cidades[['modelo', 'marca']])

# 48 - Liste os clientes que alugaram carros, os modelos e as marcas dos carros, e o total gasto em aluguéis, agrupado por cliente.
gastos_clientes = pd.merge(aluguel, carro, on='codcarro')
gastos_clientes = pd.merge(gastos_clientes, cliente, on='codcliente')
gastos_clientes['total'] = gastos_clientes['valor']
gastos_total = gastos_clientes.groupby('nome').agg(total_gasto=('total', 'sum'))
display(gastos_total)

# 49 - Encontre todos os aluguéis realizados em uma cidade específica e liste os nomes dos clientes e os modelos de carros alugados.
from datetime import datetime, timedelta
hoje = datetime.now()
a = hoje - timedelta(days=30)
b = aluguel.merge(carro, on='codcarro').merge(cliente, on='codcliente')
b = b[
    pd.to_datetime(b['data_aluguel']) >= a
][['nome', 'modelo', 'data_aluguel']]
display(b)

# 50 - Liste os clientes que alugaram carros, os modelos e marcas, e o total gasto em aluguéis, filtrando por um intervalo de datas específico.
data_inicio, data_fim = "2023-04-01", "2023-04-15"
a = (aluguel.merge(carro, on='codcarro')
.merge(cliente, on='codcliente').merge(marca, on='codmarca'))
a = a[
    (pd.to_datetime(a['data_aluguel']) >= pd.to_datetime(data_inicio))
    & (pd.to_datetime(a['data_aluguel']) <= pd.to_datetime(data_fim))
][['nome', 'modelo', 'marca', 'valor', 'data_aluguel']].sort_values(by='nome')
display(a)