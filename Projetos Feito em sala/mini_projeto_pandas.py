# -*- coding: utf-8 -*-
"""Mini projeto pandas

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_Jq7s5OsLO8UNVLitFK8_G7SfvRgxu0K
"""

'''
Você recebeu uma base de dados com informações de funcionários.
Sua tarefa é responder às seguintes perguntas utilizando a biblioteca pandas:

01 - Quantos registros existem na base de dados?
02 - Quantos registros têm informações completas (sem valores ausentes)?
03 - Substitua os valores ausentes na coluna "Salário" pela média dos salários
      e exiba a nova média.
04 - Substitua todos os valores "TI" na coluna "Departamento" por
     "Tecnologia da Informação".
05 - Qual é o salário mais alto e quem o recebe?
06 - Quantos funcionários estão no departamento de Marketing?
07 - Qual é a idade média dos funcionários por departamento?
08 - Liste os cargos únicos presentes na base.
09 - Crie uma nova coluna chamada "Tempo na Empresa" que calcula o tempo de
     trabalho com base na data de contratação.
10 - Liste os 5 funcionários com mais tempo de empresa.
11 - Quantos funcionários têm desempenho avaliado acima de 8?
12 - Qual é o salário total por departamento?
13 - Liste os 5 funcionários mais jovens.
14 - Existe algum registro sem salário? Liste-os.
15 - Utilize a função apply para criar uma nova coluna "Categoria de Salário",
     classificando os funcionários como "Baixo" (salário < 3000), "Médio"
     (3000 ≤ salário ≤ 7000) e "Alto" (salário > 7000).
16 - Utilize a função map para criar uma nova coluna chamada
     "Desempenho Simplificado", substituindo a "Avaliação de Desempenho" em
     uma escala simples: "Baixo" (1-3), "Médio" (4-7) e "Alto" (8-10).
17 - Utilize uma função lambda para criar uma nova coluna "Idade em 5 Anos",
     que adiciona 5 anos à idade atual dos funcionários.
18 - Quantos funcionários estão na categoria de salário "Alto"?
19 - Use dropna para excluir registros com valores ausentes e salve o
     DataFrame limpo em um novo arquivo CSV.
20 - Faça o casting da coluna "Avaliação de Desempenho" para o tipo inteiro e
     exiba o DataFrame.
'''

import pandas as pd

df = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vSpCW9yMoUMQ4tknj5Lg_TYVfIC3P9KoVPPqlJKsBu2HzGaC579yCp9Ohxni2ncY-xyLfugXan9K6yf/pub?gid=636707205&single=true&output=csv')
display(df.head(2))

'''
01 - Quantos registros existem na base de dados?
'''
qtd_registros = len(df)
print(qtd_registros)

'''
02 - Quantos registros têm informações completas (sem valores ausentes)?
'''
registros_completos = len(df.dropna())
print(registros_completos)

'''
03 - Substitua os valores ausentes na coluna "Salário" pela média dos salários
      e exiba a nova média.
'''
salario_medio = df["Salário"].mean()
df.fillna({'Salário':salario_medio}, inplace=True) #novo método por frescura da versão
nova_media_salario = df["Salário"].mean()
print(salario_medio)
print(nova_media_salario)

'''
04 - Substitua todos os valores "TI" na coluna "Departamento" por
     "Tecnologia da Informação".
'''
df["Departamento"].replace("TI", "Tecnologia da Informação", inplace=True)
display(df.tail())

'''
05 - Qual é o salário mais alto e quem o recebe?
'''
sal_maior = df["Salário"].max()
nome_sal_maior = df.query('Salário == @sal_maior')[['Nome','Salário','Cargo']]
display(nome_sal_maior)

'''
06 - Quantos funcionários estão no departamento de Marketing?

'''
qtd_marketing = len(df[df["Departamento"] == "Marketing"])
print(qtd_marketing)

'''
07 - Qual é a idade média dos funcionários por departamento?
'''
idade_media_por_departamento = df.groupby("Departamento")["Idade"].mean()
display(idade_media_por_departamento)

# Alternativa by Nycolas (ponto negativo, por defender esse métodokkkk)
'''
07 - Qual é a idade média dos funcionários por departamento?
'''
pd.pivot_table(df, values='Idade', index='Departamento', aggfunc='mean')

'''
08 - Liste os cargos únicos presentes na base.
'''
cargos_unicos = df["Cargo"].dropna().unique()
display(cargos_unicos)

# Alternativa by Pedro Henrique
'''
08 - Liste os cargos únicos presentes na base.
'''
df_unico = df.drop_duplicates(subset=["Cargo"])
display(df_unico['Cargo'].dropna())

'''
09 - Crie uma nova coluna chamada "Tempo na Empresa" que calcula o tempo de
     trabalho com base na data de contratação.
'''
df["Data de Contratação"] = pd.to_datetime(df["Data de Contratação"])
df["Tempo na Empresa"] = (pd.Timestamp.now() - df["Data de Contratação"]).dt.days // 365
display(df)

'''
10 - Liste os 5 funcionários com mais tempo de empresa.
'''
mais_antigos = df.nlargest(5, "Tempo na Empresa")[["Nome", "Tempo na Empresa"]]
display(mais_antigos)

'''
11 - Quantos funcionários têm desempenho avaliado acima de 8?
'''
qtd_desempenho_alto = len(df[df["Avaliação de Desempenho"] > 8])
print(qtd_desempenho_alto)

'''
12 - Qual é o salário total por departamento?
'''
salario_por_departamento = (df.groupby("Departamento")["Salário"].sum()
.reset_index())
display(salario_por_departamento)

'''
13 - Liste os 5 funcionários mais jovens.
'''
mais_jovens = df.nsmallest(5, "Idade")[["Nome", "Idade"]]
display(mais_jovens)

'''
14 - Existe algum registro sem salário? Liste-os.
'''
sem_salario = df[df["Salário"] == 'NaN']
display(sem_salario)

# Aternativa by Sheise, Álevy e Cristiano
'''
14 - Existe algum registro sem salário? Liste-os.
'''
registros_sem_salario = df[df["Salário"].isna()]
display(registros_sem_salario)

# Aternativa by Carol
q14 = df[df['Salário'].isnull()]
display(q14)

# Aternativa by Tainah
registro_sem_salario = df['Salário'].isnull().all()
print(registro_sem_salario)

# Aternativa by Nycolas
sem_salario = df['Salário'].map(lambda x: pd.isna(x))
df[sem_salario]

'''
15 - Utilize a função apply para criar uma nova coluna "Categoria de Salário",
     classificando os funcionários como "Baixo" (salário < 3000), "Médio"
     (3000 ≤ salário ≤ 7000) e "Alto" (salário > 7000).
'''
df["Categoria de Salário"] = df["Salário"].apply(
    lambda x: "Baixo" if x < 3000 else "Médio" if x <= 7000 else "Alto"
)
display(df["Categoria de Salário"])

# Alternativa by Aline
def classificar_salario(salario):
    if salario < 3000:
        return 'Baixo'
    elif 3000 <= salario <= 7000:
        return 'Médio'
    else:
        return 'Alto'
df['Categoria de Salário'] = df['Salário'].apply(classificar_salario)
display(df[['Nome', 'Salário','Categoria de Salário']])

'''
16 - Utilize a função map para criar uma nova coluna chamada
     "Desempenho Simplificado", substituindo a "Avaliação de Desempenho" em
     uma escala simples: "Baixo" (1-3), "Médio" (4-7) e "Alto" (8-10).
'''
df["Desempenho Simplificado"] = df["Avaliação de Desempenho"].map(
    lambda x: "Baixo" if x <= 3 else "Médio" if x <= 7 else "Alto"
)
display(df["Desempenho Simplificado"].head())

'''
17 - Utilize uma função lambda para criar uma nova coluna "Idade em 5 Anos",
     que adiciona 5 anos à idade atual dos funcionários.
'''
df["Idade em 5 Anos"] = df["Idade"].apply(lambda x: x + 5 if pd.notnull(x) else x)
display(df["Idade em 5 Anos"].head())

'''
18 - Quantos funcionários estão na categoria de salário "Alto"?
'''
qtd_salario_alto = len(df[df["Categoria de Salário"] == "Alto"])
print(qtd_salario_alto)

'''
19 - Use dropna para excluir registros com valores ausentes e salve o
     DataFrame limpo em um novo arquivo CSV.
'''
dados_limpos = df.dropna()
dados_limpos.to_csv("dados_limpos.csv", index=False, encoding="utf-8-sig")

'''
20 - Faça o casting da coluna "Avaliação de Desempenho" para o tipo inteiro e
     exiba o DataFrame.
'''
dados_limpos["Avaliação de Desempenho"] = dados_limpos["Avaliação de Desempenho"].astype(int)

dados_limpos.info()