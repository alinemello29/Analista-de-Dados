# -*- coding: utf-8 -*-
"""Spoiler do desafio

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ev4OJDyKqemf76gtW4XhXrEFIVqBbLaX
"""

import pandas as pd

# importando uma tabela a partir de um link da internet
df = pd.read_csv('https://docs.google.com/spreadsheets/d/e/2PACX-1vSU9iI1TDNfDVCbv4FCa9TDhBmgQKsDtrW6n7R6ndyFzDo2Qeq8sJj-RhJnzKuwm5Lx1f8n7r7ig7Vs/pub?gid=0&single=true&output=csv')
display(df)

# Criando um subdataframe com apenas as colunas quantitativas
quant = df[['idade','salario','nota']]
display(quant)

# Um subdataframe filtrando todos os elementos com ensino superior
superior = df[df['escolaridade'] == 'Superior']
display(superior)

# Calculando as correlações entre as variáveis quantitativas
quant.corr()

# Verificando o tipo
df.info()

# Calculando as principais medidas de estatística descritiva do df
df.describe()

# Mudando o tipo de dado do atributo matricula
df['matricula'] = df['matricula'].astype('str')

df.info()

df.describe()

# Agrupamentos (Groupby)
'''
Em análise de dados os atributos qualitativos são dimensões e os atributos
quantitativos são métricas, essa classificação é importante, pois, em um
agrupamento temos o seguinte conceito:
Agrupamos por dimensão e agregamos por métrica

Ex.: suponhamos que nosso objetivo seja construir uma visão
do salário médio por cargo
'''
salario_medio = df[['cargo','salario']].groupby('cargo').mean()
display(salario_medio)

'''
Suponha que você deseja construir uma visão do salário médio
agrupado por departamento e por cargo
'''
wage_dpt_fun = df[['departamento','cargo','salario']].groupby(['departamento','cargo']).mean()
display(wage_dpt_fun)

'''
Imagine que você deseja visualizar o total de salário por departamento
'''
total_salario_depto = df[['departamento','salario']].groupby('departamento').sum()
display(total_salario_depto)

'''
Qual é o salário médio por departamento
'''
sm_dp = df[['departamento','salario']].groupby('departamento').mean()
display(sm_dp)

# Incluir uma nova coluna com base em uma lista
genero = ['M','F','F','M','F','M','M','F','M','F']
df['genero'] = genero
display(df)

# Verificando o número de linhas e colunas (nessa ordem) do df
df.shape

# Excluindo a coluna genero
df = df.drop(columns='genero')
display(df)

# Incluir uma nova coluna com base em uma lista
genero = ['M','F','F','M','F','M','M','F','M','F']
df['genero'] = genero
display(df)

'''
Vamos verificar o salário médio por genero
'''
df[['genero','salario']].groupby('genero').mean()

# Vamos localizar e alterar o salário de fernando

df.loc[3,['salario']] = 12000
display(df)

'''
Vamos verificar o salário médio por genero
'''
df[['genero','salario']].groupby('genero').mean()

# Localizar o maior salário do genero M
df[df['genero'] == 'M']['salario'].max()

# Inserindo uma nova coluna com base nos valores de outra(s)
'''
Imagine que você precisa criar uma coluna que tenha o valor do fgts depositado
e que esse valor seja (1/12) do salário
'''
df['fgts'] = df['salario'] * (1/12)
display(df)

# Localizar uma interseção de linha com coluna
df.loc[0,['cidade']]

# Inserindo uma nova linha
df.loc[10] = ['11','Zé','Joanópolis','SP','Brasil',41,'Vendas','Analista',11000,'Superior',8,'M',916.6667]
display(df)

# Excluindo um linha
df = df.drop(index=10)
display(df)

# Ordenando o df de acordo com um critério
df = df.sort_values(by='salario') # Por padrão essa função ordena de forma crescente
display(df)

# Reorganizar o índice
df = df.reset_index()
display(df)

# Excluindo a coluna index gerada no bloco anterior
df = df.drop(columns='index')
display(df)

# Resetando o indice sen gerar nova coluna
df = df.sort_values(by='nota',ascending=False)
display(df)
df = df.reset_index(drop=True)
display(df)

# Neste boloco vamos construir uma tabela de frequências para uma variável qualitativa
freq = df['escolaridade'].value_counts()
percentual = df['escolaridade'].value_counts(normalize=True)*100
escolaridades = pd.DataFrame({'freq_abs':freq, 'freq_%':percentual})
escolaridades = escolaridades.sort_values(by='escolaridade') # Frescura
escolaridades = escolaridades.reset_index() # Frescura (Transforma escolaridade de índice para coluna "Frescura")
escolaridades.loc[3] = ['TOTAL', escolaridades['freq_abs'].sum(), escolaridades['freq_%'].sum()]
display(escolaridades)

escolaridades.shape

'''
Crie a tabela de frequências para a variável departamento
'''
# Neste boloco vamos construir uma tabela de frequências para uma variável qualitativa
freq = df['departamento'].value_counts()
percentual = df['departamento'].value_counts(normalize=True)*100
deptos = pd.DataFrame({'freq_abs':freq, 'freq_%':percentual})
deptos = deptos.sort_values(by='departamento') # Frescura
deptos = deptos.reset_index() # Frescura (Transforma escolaridade de índice para coluna "Frescura")
deptos.loc[5] = ['TOTAL', deptos['freq_abs'].sum(), deptos['freq_%'].sum()]
display(deptos)

# Criando uma tabela de frequências para variável quantitativa
faixas = ['[00 - 02[','[02 - 04[','[04 - 06[','[06 - 08[','[08 - 10]']
df['notas'] = pd.cut(x=df['nota'],bins=[0,1,3,5,7,9],labels=faixas)
freq = df['notas'].value_counts()
percentual = df['notas'].value_counts(normalize=True)*100
notas = pd.DataFrame({'freq_abs':freq, 'freq_%':percentual})
notas = notas.sort_values(by='notas') # Frescura
notas = notas.reset_index() # Frescura (Transforma escolaridade de índice para coluna "Frescura")
notas['freq_acum'] = notas['freq_abs'].cumsum()
notas['freq_acum_%'] = (notas['freq_acum'] / notas['freq_abs'].sum()) * 100
notas.loc[6] = ['TOTAL', notas['freq_abs'].sum(), notas['freq_%'].sum(), '-','-']
display(notas)

'''
Crie a tabela de frequências para idade considerando as faixas:
[25 - 30[,[30 - 35[, [35 - 40]
'''
# Criando uma tabela de frequências para variável quantitativa
faixas = ['[25 - 30[','[30 - 35[', '[35 - 40]']
df['idades'] = pd.cut(x=df['idade'],bins=[25,29,34,40],labels=faixas) # nesta linha devemos colocar um valor antes do limite superior da classe exceto o primeiro e o último
freq = df['idades'].value_counts()
percentual = df['idades'].value_counts(normalize=True)*100
idades = pd.DataFrame({'freq_abs':freq, 'freq_%':percentual})
idades = idades.sort_values(by='idades') # Frescura
idades = idades.reset_index() # Frescura (Transforma escolaridade de índice para coluna "Frescura")
idades['freq_acum'] = idades['freq_abs'].cumsum()
idades['freq_acum_%'] = (idades['freq_acum'] / idades['freq_abs'].sum()) * 100
idades.loc[idades.shape[0]] = ['TOTAL', idades['freq_abs'].sum(), idades['freq_%'].sum(), '-','-']
display(idades)

"""# Gráficos"""

import matplotlib.pyplot as plt
import seaborn as sns

# Histograma
df['idade'].hist()
plt.show()

# Histograma
df['idade'].hist(bins=3)
plt.title('Distribuição das idades dos funcionários')
plt.xlabel('Idade em anos')
plt.ylabel('Quantidade de Funcionários')
plt.show()

'''
Crie a tabela de frequências para idade considerando as faixas:
[28 - 32[,[32 - 36[, [36 - 40]
'''
# Criando uma tabela de frequências para variável quantitativa
faixas = ['[28 - 32[','[32 - 36[', '[36 - 40]']
df['idades'] = pd.cut(x=df['idade'],bins=[27,31,35,40],labels=faixas) # nesta linha devemos colocar um valor antes do limite superior da classe exceto o primeiro e o último
freq = df['idades'].value_counts()
percentual = df['idades'].value_counts(normalize=True)*100
idades = pd.DataFrame({'freq_abs':freq, 'freq_%':percentual})
idades = idades.sort_values(by='idades') # Frescura
idades = idades.reset_index() # Frescura (Transforma escolaridade de índice para coluna "Frescura")
idades['freq_acum'] = idades['freq_abs'].cumsum()
idades['freq_acum_%'] = (idades['freq_acum'] / idades['freq_abs'].sum()) * 100
idades.loc[idades.shape[0]] = ['TOTAL', idades['freq_abs'].sum(), idades['freq_%'].sum(), '-','-']
display(idades)

# Histograma das notas
df['nota'].hist(bins=4)
plt.title('Distribuição das notas da avaliação de desempenho')
plt.xlabel('Notas')
plt.ylabel('Quantidade de funcionários')

# Gráfico de barras/colunas
df['notas'].value_counts().plot(kind='bar')
plt.title('Distribuição das notas da avaliação de desempenho')
plt.xlabel('Notas')
plt.ylabel('Quantidade de funcionários')
plt.show()

# Gráfico de barras/colunas
df['departamento'].value_counts().plot(kind='bar')
plt.title('Distribuição dos funcionários por departamento')
plt.xlabel('Departamento')
plt.ylabel('Quantidade de funcionários')
plt.show()

# Gráfico do capiroto (pie)
plt.pie(df.groupby('genero')['genero'].count(),
        labels=list((df['genero']).unique()), autopct='%1.2f%%')
plt.show()

# Gráfico do capiroto (pie)
plt.pie(df.groupby('cidade')['cidade'].count(),
        labels=list((df['cidade']).unique()), autopct='%1.2f%%')
plt.show()

# Gráfico do capiroto (pie)
plt.pie(df.groupby('departamento')['departamento'].count(),
        labels=list((df['departamento']).unique()), autopct='%1.2f%%')
plt.show()

# Gráfico do capiroto (pie)
plt.pie(df.groupby('estado')['estado'].count(),
        labels=list((df['estado']).unique()), autopct='%1.2f%%')
plt.show()

# Diagrama de dispersão (relação entre idade e salario)
sns.scatterplot(x=df['idade'], y=df['salario'], data=df)
plt.show()

df.shape

df.info()