# -*- coding: utf-8 -*-
"""Projeto_Gerenciamento_funcionarios_Grupo_1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IUoGa9OXgmUt1E6O8PH84QtqhvYPlskA

## Sistema de Gerenciamento de Dados de Funcionários de uma Empresa
### **Grupo 1**
| Nome                             | E-mail                        |
|----------------------------------|-------------------------------|
| Alan Cristian Luciano da Silva   | developer.mind7@gmail.com     |
| Álevy Bruno Costa Nepomuceno     | alevybruno@gmail.com          |
| Alisson Faveron da Silva         | alisson.faveron011@gmail.com  |
| Aline Daniele Santana Silva      | alinedannieleenf@gmail.com    |
| Aline Pereira Melo               | alinepe2717@gmail.com         |
"""

# Classe para representar um funcionário e seus atributos
class Funcionario:
    # atributo de classe utilizado para gerir IDs únicos de funcionários
    _contador_id = 1

    def __init__(self, nome, idade, endereco, escolaridade, cargo, salario, email):
        # ID exclusivo imputado ao funcionário
        self.id = Funcionario._contador_id
        Funcionario._contador_id += 1 # Contador utilizado para incrementar o ID para o próximo funcionário a ser cadastrado
        # Atributos do funcionário
        self.nome = nome
        self.idade = idade
        self.endereco = endereco
        self.escolaridade = escolaridade
        self.cargo = cargo
        self.salario = salario
        self.email = email

    # Método criado para atualizar os dados de um funcionário
    def atualizar(self, nome=None, idade=None, endereco=None, escolaridade=None, cargo=None, salario=None, email=None):
        # Uso de 'if' para atualizar os atributos de um funcionário, sejam fornecidos
        if nome:
            self.nome = nome
        if idade:
            self.idade = idade
        if endereco:
            self.endereco = endereco
        if escolaridade:
            self.escolaridade = escolaridade
        if cargo:
            self.cargo = cargo
        if salario:
            self.salario = salario
        if email:
            self.email = email
    # Método criado para retornar uma impressão em tela dos dados do funcionário em formato de 'String'
    def __str__(self):
        return (f"\nID: {self.id}"
                f"\nNome: {self.nome}"
                f"\nIdade: {self.idade}"
                f"\nEndereço: {self.endereco}"
                f"\nEscolaridade: {self.escolaridade}"
                f"\nCargo: {self.cargo}"
                f"\nSalário: R${self.salario:.2f}"
                f"\nEmail: {self.email}")
# Classe para gerir os dados dos funcionários
class SistemaEmpresa:
    def __init__(self):
        # Lista que armazena todos os funcionários cadastrados no sistema
        self.funcionarios = []

    def add_funcionario(self):
        # Método de coleta de dados dos funcionários, incluindo tratamento de exceções
        nome = input("Insira o nome do novo funcionário: ")
        try:
            idade = int(input("Insira a idade do funcionário (Ex: '18'): "))
        except ValueError:
            print("Idade inválida. Por favor, tente novamente.")
            return
        endereco = input("Informe o endereço do funcionário: ")
        escolaridade = input("Informe o grau de escolaridade do funcionário: ")
        cargo = input("Informe o cargo do funcionário: ")
        try:
            salario = float(input("Informe o salário do funcionário em R$ (Ex: '1000.00): "))
        except ValueError:
            print("Valor digitado em formato errado! Por favor, tente novamente.")
            return
        email = input("Informe o E-mail do funcionário: ")

        # Validação de entrada dos dados fornecidos
        if not nome or idade <= 0 or not endereco or not escolaridade or not cargo or salario <= 0 or "@" not in email:
            print("======== Dados inválidos. Por favor, tente novamente. ========")
            return

        # Cria um novo objeto Funcionário e adiciona o mesmo à lista de funcionários cadastrados
        funcionario = Funcionario(nome, idade, endereco, escolaridade, cargo, salario, email)
        self.funcionarios.append(funcionario)
        print(f"\n######## Funcionário {nome} cadastrado com sucesso! ########")

    # Método usado para exibir as informações de um funcionário, filtrando por ID
    def exibir_funcionario(self):
        try:
            funcionario_id = int(input("Informe o ID do funcionário: "))
        except ValueError:
            print("\n######## ID inválido! Por favor, tente novamente. ########")
            return

        # Faz a busca do funcionário pelo ID fornecido
        for funcionario in self.funcionarios:
            if funcionario.id == funcionario_id:
                print(funcionario)
                return
        print(f"\nO ID {funcionario_id} não foi encontrado.")

    # Método usado para listar todos os funcionários cadastrados no sistema
    def lista_funcionarios(self):
        if not self.funcionarios:
            print("Não há nenhum funcionário cadastrado.")
        else:
            for funcionario in self.funcionarios:
                print(f"{funcionario}\n")

     # Método usado para atualizar os dados de um funcionário cadastrado no sistema
    def atualizar_funcionario(self):
        try:
            funcionario_id = int(input("Informe o ID do funcionário a ser atualizado: "))
        except ValueError:
            print("O ID informado é inválido! Por favor, tente novamente.")
            return

        for funcionario in self.funcionarios:
            if funcionario.id == funcionario_id:
                # Coleta novos dados do funcionário, com a opção de manter os dados atuais e fazendo o tratamento de exceção
                nome = input("Informe o novo nome (Para manter o atual, tecle ENTER): ")
                try:
                    idade = input("Informe a nova idade (Para manter a atual, tecle ENTER): ")
                    idade = int(idade) if idade else None
                except ValueError:
                    print("A idade informada é inválida. Por favor, tente novamente.")
                    return
                endereco = input("Informe o novo endereço (Para manter o atual, tecle ENTER): ")
                escolaridade = input("Informe o novo grau de escolaridade (Para manter o atual, tecle ENTER): ")
                cargo = input("Informe o novo cargo (Para manter o atual, tecle ENTER): ")
                try:
                    salario = input("Informe o novo salário (Para manter o atual, tecle ENTER): ")
                    salario = float(salario) if salario else None
                except ValueError:
                    return
                email = input("Informe o novo E-mail (Para manter o atual, tecle ENTER): ")

                # Atualiza o objeto com os novos dados fornecidos
                funcionario.atualizar(nome, idade, endereco, escolaridade, cargo, salario, email)
                print(f"\n======== Os dados do funcionário {funcionario.nome} foram atualizados com sucesso! ========")
                return
        print(f"######## O ID {funcionario_id} não foi encontrado em nosso sistema. ########")

    # Método usado para remover um funcionário do sistema, filtrando pelo ID
    def remover_funcionario(self):
        try:
            funcionario_id = int(input("Informe o ID do funcionário a ser removido do sistema: "))
        except ValueError:
            print("######## O ID informado é inválido! Por favor, tente novamente. ########")
            return

        for funcionario in self.funcionarios:
            if funcionario.id == funcionario_id:
                self.funcionarios.remove(funcionario)
                print(f"\n======== O funcionário {funcionario.nome} foi removido com sucesso! ========")
                return
        print(f"\n######## Não foi encontrado nenhum funcionário com o ID {funcionario_id}. ########"
              f"\n######## Por favor, um número ID válido e tente novamente. ######## ")

# Inicia o sistema de gestão de dados de funcionários
sistema = SistemaEmpresa()

# Função de menu para interação do usuário com o sistema
def menu():
    while True:
        print("\n======== Sistema de Gerenciamento de Funcionários ========"
              "\n\nEscolha uma das opções abaixo:")
        print("\n1. Cadastrar Funcionário")
        print("2. Exibir Funcionário")
        print("3. Listar todos os Funcionários")
        print("4. Atualizar Funcionário")
        print("5. Remover Funcionário")
        print("0. Encerrar Sistema")

        escolha = input("Escolha uma opção: ")

        # Executa uma função de acordo com a opção selecionada
        if escolha == "1":
            sistema.add_funcionario()
        elif escolha == "2":
            sistema.exibir_funcionario()
        elif escolha == "3":
            sistema.lista_funcionarios()
        elif escolha == "4":
            sistema.atualizar_funcionario()
        elif escolha == "5":
            sistema.remover_funcionario()
        elif escolha == "0":
            print("Encerrando o sistema...")
            break
        else:
            print("Opção inválida. Por favor, insira uma das opções acima e tente novamente.")

# Inicia o menu do sistema
menu()